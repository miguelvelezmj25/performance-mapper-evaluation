{
 "component": {
    "kind": "component",
    "scheme": "dataset",
    "syntax": "dataset:name",
    "title": "Dataset",
    "description": "The dataset component provides a mechanism to easily perform load & soak testing of your system.",
    "label": "core,testing",
    "deprecated": false,
    "async": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": true,
    "javaType": "org.apache.camel.component.dataset.DataSetComponent",
    "firstVersion": "1.3.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-core",
    "version": "2.19.5"
  },
  "componentProperties": {
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." }
  },
  "properties": {
    "name": { "kind": "path", "displayName": "Name", "group": "common", "required": true, "type": "object", "javaType": "org.apache.camel.component.dataset.DataSet", "deprecated": false, "secret": false, "description": "Name of DataSet to lookup in the registry" },
    "dataSetIndex": { "kind": "parameter", "displayName": "Data Set Index", "group": "common", "type": "string", "javaType": "java.lang.String", "enum": [ "strict", "lenient", "off" ], "deprecated": false, "secret": false, "defaultValue": "lenient", "description": "Controls the behaviour of the CamelDataSetIndex header. For Consumers: - off = the header will not be set - strict/lenient = the header will be set For Producers: - off = the header value will not be verified and will not be set if it is not present = strict = the header value must be present and will be verified = lenient = the header value will be verified if it is present and will be set if it is not present" },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "initialDelay": { "kind": "parameter", "displayName": "Initial Delay", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 1000, "description": "Time period in millis to wait before starting sending messages." },
    "minRate": { "kind": "parameter", "displayName": "Min Rate", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Wait until the DataSet contains at least this number of messages" },
    "preloadSize": { "kind": "parameter", "displayName": "Preload Size", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Sets how many messages should be preloaded (sent) before the route completes its initialization" },
    "produceDelay": { "kind": "parameter", "displayName": "Produce Delay", "group": "consumer", "label": "consumer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 3, "description": "Allows a delay to be specified which causes a delay when a message is sent by the consumer (to simulate slow processing)" },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": false, "secret": false, "description": "Sets the default exchange pattern when creating an exchange." },
    "assertPeriod": { "kind": "parameter", "displayName": "Assert Period", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Sets a grace period after which the mock endpoint will re-assert to ensure the preliminary assertion is still valid. This is used for example to assert that exactly a number of messages arrives. For example if link expectedMessageCount(int) was set to 5 then the assertion is satisfied when 5 or more message arrives. To ensure that exactly 5 messages arrives then you would need to wait a little period to ensure no further message arrives. This is what you can use this link setAssertPeriod(long) method for. By default this period is disabled." },
    "consumeDelay": { "kind": "parameter", "displayName": "Consume Delay", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Allows a delay to be specified which causes a delay when a message is consumed by the producer (to simulate slow processing)" },
    "expectedCount": { "kind": "parameter", "displayName": "Expected Count", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": -1, "description": "Specifies the expected number of message exchanges that should be received by this endpoint. Beware: If you want to expect that 0 messages then take extra care as 0 matches when the tests starts so you need to set a assert period time to let the test run for a while to make sure there are still no messages arrived; for that use link setAssertPeriod(long). An alternative is to use NotifyBuilder and use the notifier to know when Camel is done routing some messages before you call the link assertIsSatisfied() method on the mocks. This allows you to not use a fixed assert period to speedup testing times. If you want to assert that exactly n'th message arrives to this mock endpoint then see also the link setAssertPeriod(long) method for further details." },
    "reportGroup": { "kind": "parameter", "displayName": "Report Group", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "description": "A number that is used to turn on throughput logging based on groups of the size." },
    "resultMinimumWaitTime": { "kind": "parameter", "displayName": "Result Minimum Wait Time", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Sets the minimum expected amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied" },
    "resultWaitTime": { "kind": "parameter", "displayName": "Result Wait Time", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Sets the maximum amount of time (in millis) the link assertIsSatisfied() will wait on a latch until it is satisfied" },
    "retainFirst": { "kind": "parameter", "displayName": "Retain First", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": -1, "description": "Specifies to only retain the first n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the first 10 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the first 10 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received." },
    "retainLast": { "kind": "parameter", "displayName": "Retain Last", "group": "producer", "label": "producer", "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": -1, "description": "Specifies to only retain the last n'th number of received Exchanges. This is used when testing with big data to reduce memory consumption by not storing copies of every Exchange this mock endpoint receives. Important: When using this limitation then the link getReceivedCounter() will still return the actual number of received Exchanges. For example if we have received 5000 Exchanges and have configured to only retain the last 20 Exchanges then the link getReceivedCounter() will still return 5000 but there is only the last 20 Exchanges in the link getExchanges() and link getReceivedExchanges() methods. When using this method then some of the other expectation methods is not supported for example the link expectedBodiesReceived(Object...) sets a expectation on the first number of bodies received. You can configure both link setRetainFirst(int) and link setRetainLast(int) methods to limit both the first and last received." },
    "sleepForEmptyTest": { "kind": "parameter", "displayName": "Sleep For Empty Test", "group": "producer", "label": "producer", "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 0, "description": "Allows a sleep to be specified to wait to check that this endpoint really is empty when link expectedMessageCount(int) is called with zero" },
    "copyOnExchange": { "kind": "parameter", "displayName": "Copy On Exchange", "group": "producer (advanced)", "label": "producer,advanced", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Sets whether to make a deep copy of the incoming Exchange when received at this mock endpoint. Is by default true." },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

