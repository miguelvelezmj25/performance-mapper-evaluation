{
 "component": {
    "kind": "component",
    "scheme": "properties",
    "syntax": "properties:key",
    "title": "Properties",
    "description": "The properties component is used for using property placeholders in endpoint uris.",
    "label": "core,endpoint",
    "deprecated": false,
    "async": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "javaType": "org.apache.camel.component.properties.PropertiesComponent",
    "firstVersion": "2.3.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-core",
    "version": "2.19.5"
  },
  "componentProperties": {
    "locations": { "kind": "property", "displayName": "Locations", "group": "common", "type": "array", "javaType": "java.util.List<org.apache.camel.component.properties.PropertiesLocation>", "deprecated": false, "secret": false, "description": "A list of locations to load properties. This option will override any default locations and only use the locations from this option." },
    "location": { "kind": "property", "displayName": "Location", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option." },
    "encoding": { "kind": "property", "displayName": "Encoding", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Encoding to use when loading properties file from the file system or classpath. If no encoding has been set then the properties files is loaded using ISO-8859-1 encoding (latin-1) as documented by link java.util.Propertiesload(java.io.InputStream)" },
    "propertiesResolver": { "kind": "property", "displayName": "Properties Resolver", "group": "common", "type": "object", "javaType": "org.apache.camel.component.properties.PropertiesResolver", "deprecated": false, "secret": false, "description": "To use a custom PropertiesResolver" },
    "propertiesParser": { "kind": "property", "displayName": "Properties Parser", "group": "common", "type": "object", "javaType": "org.apache.camel.component.properties.PropertiesParser", "deprecated": false, "secret": false, "description": "To use a custom PropertiesParser" },
    "cache": { "kind": "property", "displayName": "Cache", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether or not to cache loaded properties. The default value is true." },
    "propertyPrefix": { "kind": "property", "displayName": "Property Prefix", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Optional prefix prepended to property names before resolution." },
    "propertySuffix": { "kind": "property", "displayName": "Property Suffix", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Optional suffix appended to property names before resolution." },
    "fallbackToUnaugmentedProperty": { "kind": "property", "displayName": "Fallback To Unaugmented Property", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "If true first attempt resolution of property name augmented with propertyPrefix and propertySuffix before falling back the plain property name specified. If false only the augmented property name is searched." },
    "defaultFallbackEnabled": { "kind": "property", "displayName": "Default Fallback Enabled", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "If false the component does not attempt to find a default for the key by looking after the colon separator." },
    "ignoreMissingLocation": { "kind": "property", "displayName": "Ignore Missing Location", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether to silently ignore if a location cannot be located such as a properties file not found." },
    "prefixToken": { "kind": "property", "displayName": "Prefix Token", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "{{", "description": "Sets the value of the prefix token used to identify properties to replace. Setting a value of null restores the default token (link link DEFAULT_PREFIX_TOKEN)." },
    "suffixToken": { "kind": "property", "displayName": "Suffix Token", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "}}", "description": "Sets the value of the suffix token used to identify properties to replace. Setting a value of null restores the default token (link link DEFAULT_SUFFIX_TOKEN)." },
    "initialProperties": { "kind": "property", "displayName": "Initial Properties", "group": "common", "type": "object", "javaType": "java.util.Properties", "deprecated": false, "secret": false, "description": "Sets initial properties which will be used before any locations are resolved." },
    "overrideProperties": { "kind": "property", "displayName": "Override Properties", "group": "common", "type": "object", "javaType": "java.util.Properties", "deprecated": false, "secret": false, "description": "Sets a special list of override properties that take precedence and will use first if a property exist." },
    "systemPropertiesMode": { "kind": "property", "displayName": "System Properties Mode", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 2, "description": "Sets the system property mode." },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." }
  },
  "properties": {
    "key": { "kind": "path", "displayName": "Key", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Property key to use as placeholder" },
    "ignoreMissingLocation": { "kind": "parameter", "displayName": "Ignore Missing Location", "group": "common", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether to silently ignore if a location cannot be located such as a properties file not found." },
    "locations": { "kind": "parameter", "displayName": "Locations", "group": "common", "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option." },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "RobustInOnly", "InOut", "InOptionalOut", "OutOnly", "RobustOutOnly", "OutIn", "OutOptionalIn" ], "deprecated": false, "secret": false, "description": "Sets the default exchange pattern when creating an exchange." },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

