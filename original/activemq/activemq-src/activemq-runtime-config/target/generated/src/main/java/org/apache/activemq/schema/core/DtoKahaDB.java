//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.10-b140310.1920 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.09.14 at 01:47:22 PM EDT 
//


package org.apache.activemq.schema.core;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded" minOccurs="0">
 *         &lt;choice>
 *           &lt;element name="brokerService" minOccurs="0">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;choice minOccurs="0">
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}broker"/>
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}brokerService"/>
 *                     &lt;any namespace='##other'/>
 *                   &lt;/choice>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="locker" minOccurs="0">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;choice minOccurs="0">
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}database-locker"/>
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}lease-database-locker"/>
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}shared-file-locker"/>
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}transact-database-locker"/>
 *                     &lt;any namespace='##other'/>
 *                   &lt;/choice>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="scheduledThreadPoolExecutor" minOccurs="0">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence minOccurs="0">
 *                     &lt;any maxOccurs="unbounded" minOccurs="0"/>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="transactionIdTransformer" minOccurs="0">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;sequence minOccurs="0">
 *                     &lt;any maxOccurs="unbounded" minOccurs="0"/>
 *                   &lt;/sequence>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;element name="usageManager" minOccurs="0">
 *             &lt;complexType>
 *               &lt;complexContent>
 *                 &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *                   &lt;choice minOccurs="0">
 *                     &lt;element ref="{http://activemq.apache.org/schema/core}systemUsage"/>
 *                     &lt;any namespace='##other'/>
 *                   &lt;/choice>
 *                 &lt;/restriction>
 *               &lt;/complexContent>
 *             &lt;/complexType>
 *           &lt;/element>
 *           &lt;any namespace='##other' maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/choice>
 *       &lt;attribute name="archiveCorruptedIndex" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="archiveDataLogs" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="brokerName" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="brokerService" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="checkForCorruptJournalFiles" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="checkpointInterval" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="checksumJournalFiles" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="cleanupInterval" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="compactAcksAfterNoGC" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="compactAcksIgnoresStoreGrowth" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="concurrentStoreAndDispatchQueues" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="concurrentStoreAndDispatchTopics" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="databaseLockedWaitDelay" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="directory" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="directoryArchive" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="enableAckCompaction" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="enableIndexDiskSyncs" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="enableIndexPageCaching" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="enableIndexRecoveryFile" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="enableIndexWriteAsync" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="enableJournalDiskSyncs" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="enableSubscriptionStatistics" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="failoverProducersAuditDepth" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="forceRecoverIndex" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="ignoreMissingJournalfiles" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="indexCacheSize" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="indexDirectory" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="indexLFUEvictionFactor" type="{http://www.w3.org/2001/XMLSchema}float" />
 *       &lt;attribute name="indexWriteBatchSize" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="journalDiskSyncInterval" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="journalDiskSyncStrategy" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="journalMaxFileLength" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="journalMaxWriteBatchSize" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="lockKeepAlivePeriod" type="{http://www.w3.org/2001/XMLSchema}long" />
 *       &lt;attribute name="locker" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="maxAsyncJobs" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="maxFailoverProducersToTrack" type="{http://www.w3.org/2001/XMLSchema}integer" />
 *       &lt;attribute name="preallocationScope" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="preallocationStrategy" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="purgeRecoveredXATransactionStrategy" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="scheduledThreadPoolExecutor" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="transactionIdTransformer" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="usageManager" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="useIndexLFRUEviction" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="useLock" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "brokerServiceOrLockerOrScheduledThreadPoolExecutor"
})
@XmlRootElement(name = "kahaDB")
public class DtoKahaDB implements Equals, HashCode, ToString
{

    @XmlElementRefs({
        @XmlElementRef(name = "usageManager", namespace = "http://activemq.apache.org/schema/core", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "brokerService", namespace = "http://activemq.apache.org/schema/core", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "locker", namespace = "http://activemq.apache.org/schema/core", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "scheduledThreadPoolExecutor", namespace = "http://activemq.apache.org/schema/core", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "transactionIdTransformer", namespace = "http://activemq.apache.org/schema/core", type = JAXBElement.class, required = false)
    })
    @XmlAnyElement(lax = true)
    protected List<Object> brokerServiceOrLockerOrScheduledThreadPoolExecutor;
    @XmlAttribute(name = "archiveCorruptedIndex")
    protected Boolean archiveCorruptedIndex;
    @XmlAttribute(name = "archiveDataLogs")
    protected Boolean archiveDataLogs;
    @XmlAttribute(name = "brokerName")
    protected String brokerName;
    @XmlAttribute(name = "brokerService")
    protected String brokerService;
    @XmlAttribute(name = "checkForCorruptJournalFiles")
    protected Boolean checkForCorruptJournalFiles;
    @XmlAttribute(name = "checkpointInterval")
    protected Long checkpointInterval;
    @XmlAttribute(name = "checksumJournalFiles")
    protected Boolean checksumJournalFiles;
    @XmlAttribute(name = "cleanupInterval")
    protected Long cleanupInterval;
    @XmlAttribute(name = "compactAcksAfterNoGC")
    protected BigInteger compactAcksAfterNoGC;
    @XmlAttribute(name = "compactAcksIgnoresStoreGrowth")
    protected Boolean compactAcksIgnoresStoreGrowth;
    @XmlAttribute(name = "concurrentStoreAndDispatchQueues")
    protected Boolean concurrentStoreAndDispatchQueues;
    @XmlAttribute(name = "concurrentStoreAndDispatchTopics")
    protected Boolean concurrentStoreAndDispatchTopics;
    @XmlAttribute(name = "databaseLockedWaitDelay")
    protected BigInteger databaseLockedWaitDelay;
    @XmlAttribute(name = "directory")
    protected String directory;
    @XmlAttribute(name = "directoryArchive")
    protected String directoryArchive;
    @XmlAttribute(name = "enableAckCompaction")
    protected Boolean enableAckCompaction;
    @XmlAttribute(name = "enableIndexDiskSyncs")
    protected Boolean enableIndexDiskSyncs;
    @XmlAttribute(name = "enableIndexPageCaching")
    protected Boolean enableIndexPageCaching;
    @XmlAttribute(name = "enableIndexRecoveryFile")
    protected Boolean enableIndexRecoveryFile;
    @XmlAttribute(name = "enableIndexWriteAsync")
    protected Boolean enableIndexWriteAsync;
    @XmlAttribute(name = "enableJournalDiskSyncs")
    protected Boolean enableJournalDiskSyncs;
    @XmlAttribute(name = "enableSubscriptionStatistics")
    protected Boolean enableSubscriptionStatistics;
    @XmlAttribute(name = "failoverProducersAuditDepth")
    protected BigInteger failoverProducersAuditDepth;
    @XmlAttribute(name = "forceRecoverIndex")
    protected Boolean forceRecoverIndex;
    @XmlAttribute(name = "ignoreMissingJournalfiles")
    protected Boolean ignoreMissingJournalfiles;
    @XmlAttribute(name = "indexCacheSize")
    protected String indexCacheSize;
    @XmlAttribute(name = "indexDirectory")
    protected String indexDirectory;
    @XmlAttribute(name = "indexLFUEvictionFactor")
    protected Float indexLFUEvictionFactor;
    @XmlAttribute(name = "indexWriteBatchSize")
    protected String indexWriteBatchSize;
    @XmlAttribute(name = "journalDiskSyncInterval")
    protected Long journalDiskSyncInterval;
    @XmlAttribute(name = "journalDiskSyncStrategy")
    protected String journalDiskSyncStrategy;
    @XmlAttribute(name = "journalMaxFileLength")
    protected String journalMaxFileLength;
    @XmlAttribute(name = "journalMaxWriteBatchSize")
    protected String journalMaxWriteBatchSize;
    @XmlAttribute(name = "lockKeepAlivePeriod")
    protected Long lockKeepAlivePeriod;
    @XmlAttribute(name = "locker")
    protected String locker;
    @XmlAttribute(name = "maxAsyncJobs")
    protected BigInteger maxAsyncJobs;
    @XmlAttribute(name = "maxFailoverProducersToTrack")
    protected BigInteger maxFailoverProducersToTrack;
    @XmlAttribute(name = "preallocationScope")
    protected String preallocationScope;
    @XmlAttribute(name = "preallocationStrategy")
    protected String preallocationStrategy;
    @XmlAttribute(name = "purgeRecoveredXATransactionStrategy")
    protected String purgeRecoveredXATransactionStrategy;
    @XmlAttribute(name = "scheduledThreadPoolExecutor")
    protected String scheduledThreadPoolExecutor;
    @XmlAttribute(name = "transactionIdTransformer")
    protected String transactionIdTransformer;
    @XmlAttribute(name = "usageManager")
    protected String usageManager;
    @XmlAttribute(name = "useIndexLFRUEviction")
    protected Boolean useIndexLFRUEviction;
    @XmlAttribute(name = "useLock")
    protected Boolean useLock;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the brokerServiceOrLockerOrScheduledThreadPoolExecutor property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the brokerServiceOrLockerOrScheduledThreadPoolExecutor property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBrokerServiceOrLockerOrScheduledThreadPoolExecutor().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link DtoKahaDB.Locker }{@code >}
     * {@link JAXBElement }{@code <}{@link DtoKahaDB.ScheduledThreadPoolExecutor }{@code >}
     * {@link JAXBElement }{@code <}{@link DtoKahaDB.UsageManager }{@code >}
     * {@link JAXBElement }{@code <}{@link DtoKahaDB.TransactionIdTransformer }{@code >}
     * {@link JAXBElement }{@code <}{@link DtoKahaDB.BrokerService }{@code >}
     * {@link Object }
     * 
     * 
     */
    public List<Object> getBrokerServiceOrLockerOrScheduledThreadPoolExecutor() {
        if (brokerServiceOrLockerOrScheduledThreadPoolExecutor == null) {
            brokerServiceOrLockerOrScheduledThreadPoolExecutor = new ArrayList<Object>();
        }
        return this.brokerServiceOrLockerOrScheduledThreadPoolExecutor;
    }

    /**
     * Gets the value of the archiveCorruptedIndex property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isArchiveCorruptedIndex() {
        return archiveCorruptedIndex;
    }

    /**
     * Sets the value of the archiveCorruptedIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setArchiveCorruptedIndex(Boolean value) {
        this.archiveCorruptedIndex = value;
    }

    /**
     * Gets the value of the archiveDataLogs property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isArchiveDataLogs() {
        return archiveDataLogs;
    }

    /**
     * Sets the value of the archiveDataLogs property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setArchiveDataLogs(Boolean value) {
        this.archiveDataLogs = value;
    }

    /**
     * Gets the value of the brokerName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBrokerName() {
        return brokerName;
    }

    /**
     * Sets the value of the brokerName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBrokerName(String value) {
        this.brokerName = value;
    }

    /**
     * Gets the value of the brokerService property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBrokerService() {
        return brokerService;
    }

    /**
     * Sets the value of the brokerService property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBrokerService(String value) {
        this.brokerService = value;
    }

    /**
     * Gets the value of the checkForCorruptJournalFiles property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isCheckForCorruptJournalFiles() {
        return checkForCorruptJournalFiles;
    }

    /**
     * Sets the value of the checkForCorruptJournalFiles property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCheckForCorruptJournalFiles(Boolean value) {
        this.checkForCorruptJournalFiles = value;
    }

    /**
     * Gets the value of the checkpointInterval property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getCheckpointInterval() {
        return checkpointInterval;
    }

    /**
     * Sets the value of the checkpointInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setCheckpointInterval(Long value) {
        this.checkpointInterval = value;
    }

    /**
     * Gets the value of the checksumJournalFiles property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isChecksumJournalFiles() {
        return checksumJournalFiles;
    }

    /**
     * Sets the value of the checksumJournalFiles property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setChecksumJournalFiles(Boolean value) {
        this.checksumJournalFiles = value;
    }

    /**
     * Gets the value of the cleanupInterval property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getCleanupInterval() {
        return cleanupInterval;
    }

    /**
     * Sets the value of the cleanupInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setCleanupInterval(Long value) {
        this.cleanupInterval = value;
    }

    /**
     * Gets the value of the compactAcksAfterNoGC property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getCompactAcksAfterNoGC() {
        return compactAcksAfterNoGC;
    }

    /**
     * Sets the value of the compactAcksAfterNoGC property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setCompactAcksAfterNoGC(BigInteger value) {
        this.compactAcksAfterNoGC = value;
    }

    /**
     * Gets the value of the compactAcksIgnoresStoreGrowth property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isCompactAcksIgnoresStoreGrowth() {
        return compactAcksIgnoresStoreGrowth;
    }

    /**
     * Sets the value of the compactAcksIgnoresStoreGrowth property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setCompactAcksIgnoresStoreGrowth(Boolean value) {
        this.compactAcksIgnoresStoreGrowth = value;
    }

    /**
     * Gets the value of the concurrentStoreAndDispatchQueues property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isConcurrentStoreAndDispatchQueues() {
        return concurrentStoreAndDispatchQueues;
    }

    /**
     * Sets the value of the concurrentStoreAndDispatchQueues property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setConcurrentStoreAndDispatchQueues(Boolean value) {
        this.concurrentStoreAndDispatchQueues = value;
    }

    /**
     * Gets the value of the concurrentStoreAndDispatchTopics property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isConcurrentStoreAndDispatchTopics() {
        return concurrentStoreAndDispatchTopics;
    }

    /**
     * Sets the value of the concurrentStoreAndDispatchTopics property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setConcurrentStoreAndDispatchTopics(Boolean value) {
        this.concurrentStoreAndDispatchTopics = value;
    }

    /**
     * Gets the value of the databaseLockedWaitDelay property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getDatabaseLockedWaitDelay() {
        return databaseLockedWaitDelay;
    }

    /**
     * Sets the value of the databaseLockedWaitDelay property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setDatabaseLockedWaitDelay(BigInteger value) {
        this.databaseLockedWaitDelay = value;
    }

    /**
     * Gets the value of the directory property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDirectory() {
        return directory;
    }

    /**
     * Sets the value of the directory property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDirectory(String value) {
        this.directory = value;
    }

    /**
     * Gets the value of the directoryArchive property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDirectoryArchive() {
        return directoryArchive;
    }

    /**
     * Sets the value of the directoryArchive property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDirectoryArchive(String value) {
        this.directoryArchive = value;
    }

    /**
     * Gets the value of the enableAckCompaction property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableAckCompaction() {
        return enableAckCompaction;
    }

    /**
     * Sets the value of the enableAckCompaction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableAckCompaction(Boolean value) {
        this.enableAckCompaction = value;
    }

    /**
     * Gets the value of the enableIndexDiskSyncs property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableIndexDiskSyncs() {
        return enableIndexDiskSyncs;
    }

    /**
     * Sets the value of the enableIndexDiskSyncs property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableIndexDiskSyncs(Boolean value) {
        this.enableIndexDiskSyncs = value;
    }

    /**
     * Gets the value of the enableIndexPageCaching property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableIndexPageCaching() {
        return enableIndexPageCaching;
    }

    /**
     * Sets the value of the enableIndexPageCaching property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableIndexPageCaching(Boolean value) {
        this.enableIndexPageCaching = value;
    }

    /**
     * Gets the value of the enableIndexRecoveryFile property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableIndexRecoveryFile() {
        return enableIndexRecoveryFile;
    }

    /**
     * Sets the value of the enableIndexRecoveryFile property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableIndexRecoveryFile(Boolean value) {
        this.enableIndexRecoveryFile = value;
    }

    /**
     * Gets the value of the enableIndexWriteAsync property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableIndexWriteAsync() {
        return enableIndexWriteAsync;
    }

    /**
     * Sets the value of the enableIndexWriteAsync property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableIndexWriteAsync(Boolean value) {
        this.enableIndexWriteAsync = value;
    }

    /**
     * Gets the value of the enableJournalDiskSyncs property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableJournalDiskSyncs() {
        return enableJournalDiskSyncs;
    }

    /**
     * Sets the value of the enableJournalDiskSyncs property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableJournalDiskSyncs(Boolean value) {
        this.enableJournalDiskSyncs = value;
    }

    /**
     * Gets the value of the enableSubscriptionStatistics property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isEnableSubscriptionStatistics() {
        return enableSubscriptionStatistics;
    }

    /**
     * Sets the value of the enableSubscriptionStatistics property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setEnableSubscriptionStatistics(Boolean value) {
        this.enableSubscriptionStatistics = value;
    }

    /**
     * Gets the value of the failoverProducersAuditDepth property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getFailoverProducersAuditDepth() {
        return failoverProducersAuditDepth;
    }

    /**
     * Sets the value of the failoverProducersAuditDepth property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setFailoverProducersAuditDepth(BigInteger value) {
        this.failoverProducersAuditDepth = value;
    }

    /**
     * Gets the value of the forceRecoverIndex property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isForceRecoverIndex() {
        return forceRecoverIndex;
    }

    /**
     * Sets the value of the forceRecoverIndex property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setForceRecoverIndex(Boolean value) {
        this.forceRecoverIndex = value;
    }

    /**
     * Gets the value of the ignoreMissingJournalfiles property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isIgnoreMissingJournalfiles() {
        return ignoreMissingJournalfiles;
    }

    /**
     * Sets the value of the ignoreMissingJournalfiles property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setIgnoreMissingJournalfiles(Boolean value) {
        this.ignoreMissingJournalfiles = value;
    }

    /**
     * Gets the value of the indexCacheSize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexCacheSize() {
        return indexCacheSize;
    }

    /**
     * Sets the value of the indexCacheSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexCacheSize(String value) {
        this.indexCacheSize = value;
    }

    /**
     * Gets the value of the indexDirectory property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexDirectory() {
        return indexDirectory;
    }

    /**
     * Sets the value of the indexDirectory property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexDirectory(String value) {
        this.indexDirectory = value;
    }

    /**
     * Gets the value of the indexLFUEvictionFactor property.
     * 
     * @return
     *     possible object is
     *     {@link Float }
     *     
     */
    public Float getIndexLFUEvictionFactor() {
        return indexLFUEvictionFactor;
    }

    /**
     * Sets the value of the indexLFUEvictionFactor property.
     * 
     * @param value
     *     allowed object is
     *     {@link Float }
     *     
     */
    public void setIndexLFUEvictionFactor(Float value) {
        this.indexLFUEvictionFactor = value;
    }

    /**
     * Gets the value of the indexWriteBatchSize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIndexWriteBatchSize() {
        return indexWriteBatchSize;
    }

    /**
     * Sets the value of the indexWriteBatchSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIndexWriteBatchSize(String value) {
        this.indexWriteBatchSize = value;
    }

    /**
     * Gets the value of the journalDiskSyncInterval property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getJournalDiskSyncInterval() {
        return journalDiskSyncInterval;
    }

    /**
     * Sets the value of the journalDiskSyncInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setJournalDiskSyncInterval(Long value) {
        this.journalDiskSyncInterval = value;
    }

    /**
     * Gets the value of the journalDiskSyncStrategy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJournalDiskSyncStrategy() {
        return journalDiskSyncStrategy;
    }

    /**
     * Sets the value of the journalDiskSyncStrategy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setJournalDiskSyncStrategy(String value) {
        this.journalDiskSyncStrategy = value;
    }

    /**
     * Gets the value of the journalMaxFileLength property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJournalMaxFileLength() {
        return journalMaxFileLength;
    }

    /**
     * Sets the value of the journalMaxFileLength property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setJournalMaxFileLength(String value) {
        this.journalMaxFileLength = value;
    }

    /**
     * Gets the value of the journalMaxWriteBatchSize property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getJournalMaxWriteBatchSize() {
        return journalMaxWriteBatchSize;
    }

    /**
     * Sets the value of the journalMaxWriteBatchSize property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setJournalMaxWriteBatchSize(String value) {
        this.journalMaxWriteBatchSize = value;
    }

    /**
     * Gets the value of the lockKeepAlivePeriod property.
     * 
     * @return
     *     possible object is
     *     {@link Long }
     *     
     */
    public Long getLockKeepAlivePeriod() {
        return lockKeepAlivePeriod;
    }

    /**
     * Sets the value of the lockKeepAlivePeriod property.
     * 
     * @param value
     *     allowed object is
     *     {@link Long }
     *     
     */
    public void setLockKeepAlivePeriod(Long value) {
        this.lockKeepAlivePeriod = value;
    }

    /**
     * Gets the value of the locker property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLocker() {
        return locker;
    }

    /**
     * Sets the value of the locker property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLocker(String value) {
        this.locker = value;
    }

    /**
     * Gets the value of the maxAsyncJobs property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxAsyncJobs() {
        return maxAsyncJobs;
    }

    /**
     * Sets the value of the maxAsyncJobs property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxAsyncJobs(BigInteger value) {
        this.maxAsyncJobs = value;
    }

    /**
     * Gets the value of the maxFailoverProducersToTrack property.
     * 
     * @return
     *     possible object is
     *     {@link BigInteger }
     *     
     */
    public BigInteger getMaxFailoverProducersToTrack() {
        return maxFailoverProducersToTrack;
    }

    /**
     * Sets the value of the maxFailoverProducersToTrack property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     */
    public void setMaxFailoverProducersToTrack(BigInteger value) {
        this.maxFailoverProducersToTrack = value;
    }

    /**
     * Gets the value of the preallocationScope property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPreallocationScope() {
        return preallocationScope;
    }

    /**
     * Sets the value of the preallocationScope property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPreallocationScope(String value) {
        this.preallocationScope = value;
    }

    /**
     * Gets the value of the preallocationStrategy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPreallocationStrategy() {
        return preallocationStrategy;
    }

    /**
     * Sets the value of the preallocationStrategy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPreallocationStrategy(String value) {
        this.preallocationStrategy = value;
    }

    /**
     * Gets the value of the purgeRecoveredXATransactionStrategy property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPurgeRecoveredXATransactionStrategy() {
        return purgeRecoveredXATransactionStrategy;
    }

    /**
     * Sets the value of the purgeRecoveredXATransactionStrategy property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPurgeRecoveredXATransactionStrategy(String value) {
        this.purgeRecoveredXATransactionStrategy = value;
    }

    /**
     * Gets the value of the scheduledThreadPoolExecutor property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getScheduledThreadPoolExecutor() {
        return scheduledThreadPoolExecutor;
    }

    /**
     * Sets the value of the scheduledThreadPoolExecutor property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setScheduledThreadPoolExecutor(String value) {
        this.scheduledThreadPoolExecutor = value;
    }

    /**
     * Gets the value of the transactionIdTransformer property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getTransactionIdTransformer() {
        return transactionIdTransformer;
    }

    /**
     * Sets the value of the transactionIdTransformer property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setTransactionIdTransformer(String value) {
        this.transactionIdTransformer = value;
    }

    /**
     * Gets the value of the usageManager property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUsageManager() {
        return usageManager;
    }

    /**
     * Sets the value of the usageManager property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUsageManager(String value) {
        this.usageManager = value;
    }

    /**
     * Gets the value of the useIndexLFRUEviction property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isUseIndexLFRUEviction() {
        return useIndexLFRUEviction;
    }

    /**
     * Sets the value of the useIndexLFRUEviction property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUseIndexLFRUEviction(Boolean value) {
        this.useIndexLFRUEviction = value;
    }

    /**
     * Gets the value of the useLock property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isUseLock() {
        return useLock;
    }

    /**
     * Sets the value of the useLock property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setUseLock(Boolean value) {
        this.useLock = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<Object> theBrokerServiceOrLockerOrScheduledThreadPoolExecutor;
            theBrokerServiceOrLockerOrScheduledThreadPoolExecutor = (((this.brokerServiceOrLockerOrScheduledThreadPoolExecutor!= null)&&(!this.brokerServiceOrLockerOrScheduledThreadPoolExecutor.isEmpty()))?this.getBrokerServiceOrLockerOrScheduledThreadPoolExecutor():null);
            strategy.appendField(locator, this, "brokerServiceOrLockerOrScheduledThreadPoolExecutor", buffer, theBrokerServiceOrLockerOrScheduledThreadPoolExecutor);
        }
        {
            Boolean theArchiveCorruptedIndex;
            theArchiveCorruptedIndex = this.isArchiveCorruptedIndex();
            strategy.appendField(locator, this, "archiveCorruptedIndex", buffer, theArchiveCorruptedIndex);
        }
        {
            Boolean theArchiveDataLogs;
            theArchiveDataLogs = this.isArchiveDataLogs();
            strategy.appendField(locator, this, "archiveDataLogs", buffer, theArchiveDataLogs);
        }
        {
            String theBrokerName;
            theBrokerName = this.getBrokerName();
            strategy.appendField(locator, this, "brokerName", buffer, theBrokerName);
        }
        {
            String theBrokerService;
            theBrokerService = this.getBrokerService();
            strategy.appendField(locator, this, "brokerService", buffer, theBrokerService);
        }
        {
            Boolean theCheckForCorruptJournalFiles;
            theCheckForCorruptJournalFiles = this.isCheckForCorruptJournalFiles();
            strategy.appendField(locator, this, "checkForCorruptJournalFiles", buffer, theCheckForCorruptJournalFiles);
        }
        {
            Long theCheckpointInterval;
            theCheckpointInterval = this.getCheckpointInterval();
            strategy.appendField(locator, this, "checkpointInterval", buffer, theCheckpointInterval);
        }
        {
            Boolean theChecksumJournalFiles;
            theChecksumJournalFiles = this.isChecksumJournalFiles();
            strategy.appendField(locator, this, "checksumJournalFiles", buffer, theChecksumJournalFiles);
        }
        {
            Long theCleanupInterval;
            theCleanupInterval = this.getCleanupInterval();
            strategy.appendField(locator, this, "cleanupInterval", buffer, theCleanupInterval);
        }
        {
            BigInteger theCompactAcksAfterNoGC;
            theCompactAcksAfterNoGC = this.getCompactAcksAfterNoGC();
            strategy.appendField(locator, this, "compactAcksAfterNoGC", buffer, theCompactAcksAfterNoGC);
        }
        {
            Boolean theCompactAcksIgnoresStoreGrowth;
            theCompactAcksIgnoresStoreGrowth = this.isCompactAcksIgnoresStoreGrowth();
            strategy.appendField(locator, this, "compactAcksIgnoresStoreGrowth", buffer, theCompactAcksIgnoresStoreGrowth);
        }
        {
            Boolean theConcurrentStoreAndDispatchQueues;
            theConcurrentStoreAndDispatchQueues = this.isConcurrentStoreAndDispatchQueues();
            strategy.appendField(locator, this, "concurrentStoreAndDispatchQueues", buffer, theConcurrentStoreAndDispatchQueues);
        }
        {
            Boolean theConcurrentStoreAndDispatchTopics;
            theConcurrentStoreAndDispatchTopics = this.isConcurrentStoreAndDispatchTopics();
            strategy.appendField(locator, this, "concurrentStoreAndDispatchTopics", buffer, theConcurrentStoreAndDispatchTopics);
        }
        {
            BigInteger theDatabaseLockedWaitDelay;
            theDatabaseLockedWaitDelay = this.getDatabaseLockedWaitDelay();
            strategy.appendField(locator, this, "databaseLockedWaitDelay", buffer, theDatabaseLockedWaitDelay);
        }
        {
            String theDirectory;
            theDirectory = this.getDirectory();
            strategy.appendField(locator, this, "directory", buffer, theDirectory);
        }
        {
            String theDirectoryArchive;
            theDirectoryArchive = this.getDirectoryArchive();
            strategy.appendField(locator, this, "directoryArchive", buffer, theDirectoryArchive);
        }
        {
            Boolean theEnableAckCompaction;
            theEnableAckCompaction = this.isEnableAckCompaction();
            strategy.appendField(locator, this, "enableAckCompaction", buffer, theEnableAckCompaction);
        }
        {
            Boolean theEnableIndexDiskSyncs;
            theEnableIndexDiskSyncs = this.isEnableIndexDiskSyncs();
            strategy.appendField(locator, this, "enableIndexDiskSyncs", buffer, theEnableIndexDiskSyncs);
        }
        {
            Boolean theEnableIndexPageCaching;
            theEnableIndexPageCaching = this.isEnableIndexPageCaching();
            strategy.appendField(locator, this, "enableIndexPageCaching", buffer, theEnableIndexPageCaching);
        }
        {
            Boolean theEnableIndexRecoveryFile;
            theEnableIndexRecoveryFile = this.isEnableIndexRecoveryFile();
            strategy.appendField(locator, this, "enableIndexRecoveryFile", buffer, theEnableIndexRecoveryFile);
        }
        {
            Boolean theEnableIndexWriteAsync;
            theEnableIndexWriteAsync = this.isEnableIndexWriteAsync();
            strategy.appendField(locator, this, "enableIndexWriteAsync", buffer, theEnableIndexWriteAsync);
        }
        {
            Boolean theEnableJournalDiskSyncs;
            theEnableJournalDiskSyncs = this.isEnableJournalDiskSyncs();
            strategy.appendField(locator, this, "enableJournalDiskSyncs", buffer, theEnableJournalDiskSyncs);
        }
        {
            Boolean theEnableSubscriptionStatistics;
            theEnableSubscriptionStatistics = this.isEnableSubscriptionStatistics();
            strategy.appendField(locator, this, "enableSubscriptionStatistics", buffer, theEnableSubscriptionStatistics);
        }
        {
            BigInteger theFailoverProducersAuditDepth;
            theFailoverProducersAuditDepth = this.getFailoverProducersAuditDepth();
            strategy.appendField(locator, this, "failoverProducersAuditDepth", buffer, theFailoverProducersAuditDepth);
        }
        {
            Boolean theForceRecoverIndex;
            theForceRecoverIndex = this.isForceRecoverIndex();
            strategy.appendField(locator, this, "forceRecoverIndex", buffer, theForceRecoverIndex);
        }
        {
            Boolean theIgnoreMissingJournalfiles;
            theIgnoreMissingJournalfiles = this.isIgnoreMissingJournalfiles();
            strategy.appendField(locator, this, "ignoreMissingJournalfiles", buffer, theIgnoreMissingJournalfiles);
        }
        {
            String theIndexCacheSize;
            theIndexCacheSize = this.getIndexCacheSize();
            strategy.appendField(locator, this, "indexCacheSize", buffer, theIndexCacheSize);
        }
        {
            String theIndexDirectory;
            theIndexDirectory = this.getIndexDirectory();
            strategy.appendField(locator, this, "indexDirectory", buffer, theIndexDirectory);
        }
        {
            Float theIndexLFUEvictionFactor;
            theIndexLFUEvictionFactor = this.getIndexLFUEvictionFactor();
            strategy.appendField(locator, this, "indexLFUEvictionFactor", buffer, theIndexLFUEvictionFactor);
        }
        {
            String theIndexWriteBatchSize;
            theIndexWriteBatchSize = this.getIndexWriteBatchSize();
            strategy.appendField(locator, this, "indexWriteBatchSize", buffer, theIndexWriteBatchSize);
        }
        {
            Long theJournalDiskSyncInterval;
            theJournalDiskSyncInterval = this.getJournalDiskSyncInterval();
            strategy.appendField(locator, this, "journalDiskSyncInterval", buffer, theJournalDiskSyncInterval);
        }
        {
            String theJournalDiskSyncStrategy;
            theJournalDiskSyncStrategy = this.getJournalDiskSyncStrategy();
            strategy.appendField(locator, this, "journalDiskSyncStrategy", buffer, theJournalDiskSyncStrategy);
        }
        {
            String theJournalMaxFileLength;
            theJournalMaxFileLength = this.getJournalMaxFileLength();
            strategy.appendField(locator, this, "journalMaxFileLength", buffer, theJournalMaxFileLength);
        }
        {
            String theJournalMaxWriteBatchSize;
            theJournalMaxWriteBatchSize = this.getJournalMaxWriteBatchSize();
            strategy.appendField(locator, this, "journalMaxWriteBatchSize", buffer, theJournalMaxWriteBatchSize);
        }
        {
            Long theLockKeepAlivePeriod;
            theLockKeepAlivePeriod = this.getLockKeepAlivePeriod();
            strategy.appendField(locator, this, "lockKeepAlivePeriod", buffer, theLockKeepAlivePeriod);
        }
        {
            String theLocker;
            theLocker = this.getLocker();
            strategy.appendField(locator, this, "locker", buffer, theLocker);
        }
        {
            BigInteger theMaxAsyncJobs;
            theMaxAsyncJobs = this.getMaxAsyncJobs();
            strategy.appendField(locator, this, "maxAsyncJobs", buffer, theMaxAsyncJobs);
        }
        {
            BigInteger theMaxFailoverProducersToTrack;
            theMaxFailoverProducersToTrack = this.getMaxFailoverProducersToTrack();
            strategy.appendField(locator, this, "maxFailoverProducersToTrack", buffer, theMaxFailoverProducersToTrack);
        }
        {
            String thePreallocationScope;
            thePreallocationScope = this.getPreallocationScope();
            strategy.appendField(locator, this, "preallocationScope", buffer, thePreallocationScope);
        }
        {
            String thePreallocationStrategy;
            thePreallocationStrategy = this.getPreallocationStrategy();
            strategy.appendField(locator, this, "preallocationStrategy", buffer, thePreallocationStrategy);
        }
        {
            String thePurgeRecoveredXATransactionStrategy;
            thePurgeRecoveredXATransactionStrategy = this.getPurgeRecoveredXATransactionStrategy();
            strategy.appendField(locator, this, "purgeRecoveredXATransactionStrategy", buffer, thePurgeRecoveredXATransactionStrategy);
        }
        {
            String theScheduledThreadPoolExecutor;
            theScheduledThreadPoolExecutor = this.getScheduledThreadPoolExecutor();
            strategy.appendField(locator, this, "scheduledThreadPoolExecutor", buffer, theScheduledThreadPoolExecutor);
        }
        {
            String theTransactionIdTransformer;
            theTransactionIdTransformer = this.getTransactionIdTransformer();
            strategy.appendField(locator, this, "transactionIdTransformer", buffer, theTransactionIdTransformer);
        }
        {
            String theUsageManager;
            theUsageManager = this.getUsageManager();
            strategy.appendField(locator, this, "usageManager", buffer, theUsageManager);
        }
        {
            Boolean theUseIndexLFRUEviction;
            theUseIndexLFRUEviction = this.isUseIndexLFRUEviction();
            strategy.appendField(locator, this, "useIndexLFRUEviction", buffer, theUseIndexLFRUEviction);
        }
        {
            Boolean theUseLock;
            theUseLock = this.isUseLock();
            strategy.appendField(locator, this, "useLock", buffer, theUseLock);
        }
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        return buffer;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<Object> theBrokerServiceOrLockerOrScheduledThreadPoolExecutor;
            theBrokerServiceOrLockerOrScheduledThreadPoolExecutor = (((this.brokerServiceOrLockerOrScheduledThreadPoolExecutor!= null)&&(!this.brokerServiceOrLockerOrScheduledThreadPoolExecutor.isEmpty()))?this.getBrokerServiceOrLockerOrScheduledThreadPoolExecutor():null);
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brokerServiceOrLockerOrScheduledThreadPoolExecutor", theBrokerServiceOrLockerOrScheduledThreadPoolExecutor), currentHashCode, theBrokerServiceOrLockerOrScheduledThreadPoolExecutor);
        }
        {
            Boolean theArchiveCorruptedIndex;
            theArchiveCorruptedIndex = this.isArchiveCorruptedIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "archiveCorruptedIndex", theArchiveCorruptedIndex), currentHashCode, theArchiveCorruptedIndex);
        }
        {
            Boolean theArchiveDataLogs;
            theArchiveDataLogs = this.isArchiveDataLogs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "archiveDataLogs", theArchiveDataLogs), currentHashCode, theArchiveDataLogs);
        }
        {
            String theBrokerName;
            theBrokerName = this.getBrokerName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brokerName", theBrokerName), currentHashCode, theBrokerName);
        }
        {
            String theBrokerService;
            theBrokerService = this.getBrokerService();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brokerService", theBrokerService), currentHashCode, theBrokerService);
        }
        {
            Boolean theCheckForCorruptJournalFiles;
            theCheckForCorruptJournalFiles = this.isCheckForCorruptJournalFiles();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "checkForCorruptJournalFiles", theCheckForCorruptJournalFiles), currentHashCode, theCheckForCorruptJournalFiles);
        }
        {
            Long theCheckpointInterval;
            theCheckpointInterval = this.getCheckpointInterval();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "checkpointInterval", theCheckpointInterval), currentHashCode, theCheckpointInterval);
        }
        {
            Boolean theChecksumJournalFiles;
            theChecksumJournalFiles = this.isChecksumJournalFiles();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "checksumJournalFiles", theChecksumJournalFiles), currentHashCode, theChecksumJournalFiles);
        }
        {
            Long theCleanupInterval;
            theCleanupInterval = this.getCleanupInterval();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cleanupInterval", theCleanupInterval), currentHashCode, theCleanupInterval);
        }
        {
            BigInteger theCompactAcksAfterNoGC;
            theCompactAcksAfterNoGC = this.getCompactAcksAfterNoGC();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "compactAcksAfterNoGC", theCompactAcksAfterNoGC), currentHashCode, theCompactAcksAfterNoGC);
        }
        {
            Boolean theCompactAcksIgnoresStoreGrowth;
            theCompactAcksIgnoresStoreGrowth = this.isCompactAcksIgnoresStoreGrowth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "compactAcksIgnoresStoreGrowth", theCompactAcksIgnoresStoreGrowth), currentHashCode, theCompactAcksIgnoresStoreGrowth);
        }
        {
            Boolean theConcurrentStoreAndDispatchQueues;
            theConcurrentStoreAndDispatchQueues = this.isConcurrentStoreAndDispatchQueues();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concurrentStoreAndDispatchQueues", theConcurrentStoreAndDispatchQueues), currentHashCode, theConcurrentStoreAndDispatchQueues);
        }
        {
            Boolean theConcurrentStoreAndDispatchTopics;
            theConcurrentStoreAndDispatchTopics = this.isConcurrentStoreAndDispatchTopics();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concurrentStoreAndDispatchTopics", theConcurrentStoreAndDispatchTopics), currentHashCode, theConcurrentStoreAndDispatchTopics);
        }
        {
            BigInteger theDatabaseLockedWaitDelay;
            theDatabaseLockedWaitDelay = this.getDatabaseLockedWaitDelay();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "databaseLockedWaitDelay", theDatabaseLockedWaitDelay), currentHashCode, theDatabaseLockedWaitDelay);
        }
        {
            String theDirectory;
            theDirectory = this.getDirectory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directory", theDirectory), currentHashCode, theDirectory);
        }
        {
            String theDirectoryArchive;
            theDirectoryArchive = this.getDirectoryArchive();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "directoryArchive", theDirectoryArchive), currentHashCode, theDirectoryArchive);
        }
        {
            Boolean theEnableAckCompaction;
            theEnableAckCompaction = this.isEnableAckCompaction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableAckCompaction", theEnableAckCompaction), currentHashCode, theEnableAckCompaction);
        }
        {
            Boolean theEnableIndexDiskSyncs;
            theEnableIndexDiskSyncs = this.isEnableIndexDiskSyncs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableIndexDiskSyncs", theEnableIndexDiskSyncs), currentHashCode, theEnableIndexDiskSyncs);
        }
        {
            Boolean theEnableIndexPageCaching;
            theEnableIndexPageCaching = this.isEnableIndexPageCaching();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableIndexPageCaching", theEnableIndexPageCaching), currentHashCode, theEnableIndexPageCaching);
        }
        {
            Boolean theEnableIndexRecoveryFile;
            theEnableIndexRecoveryFile = this.isEnableIndexRecoveryFile();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableIndexRecoveryFile", theEnableIndexRecoveryFile), currentHashCode, theEnableIndexRecoveryFile);
        }
        {
            Boolean theEnableIndexWriteAsync;
            theEnableIndexWriteAsync = this.isEnableIndexWriteAsync();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableIndexWriteAsync", theEnableIndexWriteAsync), currentHashCode, theEnableIndexWriteAsync);
        }
        {
            Boolean theEnableJournalDiskSyncs;
            theEnableJournalDiskSyncs = this.isEnableJournalDiskSyncs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableJournalDiskSyncs", theEnableJournalDiskSyncs), currentHashCode, theEnableJournalDiskSyncs);
        }
        {
            Boolean theEnableSubscriptionStatistics;
            theEnableSubscriptionStatistics = this.isEnableSubscriptionStatistics();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "enableSubscriptionStatistics", theEnableSubscriptionStatistics), currentHashCode, theEnableSubscriptionStatistics);
        }
        {
            BigInteger theFailoverProducersAuditDepth;
            theFailoverProducersAuditDepth = this.getFailoverProducersAuditDepth();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "failoverProducersAuditDepth", theFailoverProducersAuditDepth), currentHashCode, theFailoverProducersAuditDepth);
        }
        {
            Boolean theForceRecoverIndex;
            theForceRecoverIndex = this.isForceRecoverIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "forceRecoverIndex", theForceRecoverIndex), currentHashCode, theForceRecoverIndex);
        }
        {
            Boolean theIgnoreMissingJournalfiles;
            theIgnoreMissingJournalfiles = this.isIgnoreMissingJournalfiles();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ignoreMissingJournalfiles", theIgnoreMissingJournalfiles), currentHashCode, theIgnoreMissingJournalfiles);
        }
        {
            String theIndexCacheSize;
            theIndexCacheSize = this.getIndexCacheSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexCacheSize", theIndexCacheSize), currentHashCode, theIndexCacheSize);
        }
        {
            String theIndexDirectory;
            theIndexDirectory = this.getIndexDirectory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexDirectory", theIndexDirectory), currentHashCode, theIndexDirectory);
        }
        {
            Float theIndexLFUEvictionFactor;
            theIndexLFUEvictionFactor = this.getIndexLFUEvictionFactor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexLFUEvictionFactor", theIndexLFUEvictionFactor), currentHashCode, theIndexLFUEvictionFactor);
        }
        {
            String theIndexWriteBatchSize;
            theIndexWriteBatchSize = this.getIndexWriteBatchSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "indexWriteBatchSize", theIndexWriteBatchSize), currentHashCode, theIndexWriteBatchSize);
        }
        {
            Long theJournalDiskSyncInterval;
            theJournalDiskSyncInterval = this.getJournalDiskSyncInterval();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "journalDiskSyncInterval", theJournalDiskSyncInterval), currentHashCode, theJournalDiskSyncInterval);
        }
        {
            String theJournalDiskSyncStrategy;
            theJournalDiskSyncStrategy = this.getJournalDiskSyncStrategy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "journalDiskSyncStrategy", theJournalDiskSyncStrategy), currentHashCode, theJournalDiskSyncStrategy);
        }
        {
            String theJournalMaxFileLength;
            theJournalMaxFileLength = this.getJournalMaxFileLength();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "journalMaxFileLength", theJournalMaxFileLength), currentHashCode, theJournalMaxFileLength);
        }
        {
            String theJournalMaxWriteBatchSize;
            theJournalMaxWriteBatchSize = this.getJournalMaxWriteBatchSize();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "journalMaxWriteBatchSize", theJournalMaxWriteBatchSize), currentHashCode, theJournalMaxWriteBatchSize);
        }
        {
            Long theLockKeepAlivePeriod;
            theLockKeepAlivePeriod = this.getLockKeepAlivePeriod();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lockKeepAlivePeriod", theLockKeepAlivePeriod), currentHashCode, theLockKeepAlivePeriod);
        }
        {
            String theLocker;
            theLocker = this.getLocker();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "locker", theLocker), currentHashCode, theLocker);
        }
        {
            BigInteger theMaxAsyncJobs;
            theMaxAsyncJobs = this.getMaxAsyncJobs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxAsyncJobs", theMaxAsyncJobs), currentHashCode, theMaxAsyncJobs);
        }
        {
            BigInteger theMaxFailoverProducersToTrack;
            theMaxFailoverProducersToTrack = this.getMaxFailoverProducersToTrack();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "maxFailoverProducersToTrack", theMaxFailoverProducersToTrack), currentHashCode, theMaxFailoverProducersToTrack);
        }
        {
            String thePreallocationScope;
            thePreallocationScope = this.getPreallocationScope();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preallocationScope", thePreallocationScope), currentHashCode, thePreallocationScope);
        }
        {
            String thePreallocationStrategy;
            thePreallocationStrategy = this.getPreallocationStrategy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "preallocationStrategy", thePreallocationStrategy), currentHashCode, thePreallocationStrategy);
        }
        {
            String thePurgeRecoveredXATransactionStrategy;
            thePurgeRecoveredXATransactionStrategy = this.getPurgeRecoveredXATransactionStrategy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "purgeRecoveredXATransactionStrategy", thePurgeRecoveredXATransactionStrategy), currentHashCode, thePurgeRecoveredXATransactionStrategy);
        }
        {
            String theScheduledThreadPoolExecutor;
            theScheduledThreadPoolExecutor = this.getScheduledThreadPoolExecutor();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "scheduledThreadPoolExecutor", theScheduledThreadPoolExecutor), currentHashCode, theScheduledThreadPoolExecutor);
        }
        {
            String theTransactionIdTransformer;
            theTransactionIdTransformer = this.getTransactionIdTransformer();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transactionIdTransformer", theTransactionIdTransformer), currentHashCode, theTransactionIdTransformer);
        }
        {
            String theUsageManager;
            theUsageManager = this.getUsageManager();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "usageManager", theUsageManager), currentHashCode, theUsageManager);
        }
        {
            Boolean theUseIndexLFRUEviction;
            theUseIndexLFRUEviction = this.isUseIndexLFRUEviction();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "useIndexLFRUEviction", theUseIndexLFRUEviction), currentHashCode, theUseIndexLFRUEviction);
        }
        {
            Boolean theUseLock;
            theUseLock = this.isUseLock();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "useLock", theUseLock), currentHashCode, theUseLock);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DtoKahaDB)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DtoKahaDB that = ((DtoKahaDB) object);
        {
            List<Object> lhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor;
            lhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor = (((this.brokerServiceOrLockerOrScheduledThreadPoolExecutor!= null)&&(!this.brokerServiceOrLockerOrScheduledThreadPoolExecutor.isEmpty()))?this.getBrokerServiceOrLockerOrScheduledThreadPoolExecutor():null);
            List<Object> rhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor;
            rhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor = (((that.brokerServiceOrLockerOrScheduledThreadPoolExecutor!= null)&&(!that.brokerServiceOrLockerOrScheduledThreadPoolExecutor.isEmpty()))?that.getBrokerServiceOrLockerOrScheduledThreadPoolExecutor():null);
            if (!strategy.equals(LocatorUtils.property(thisLocator, "brokerServiceOrLockerOrScheduledThreadPoolExecutor", lhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor), LocatorUtils.property(thatLocator, "brokerServiceOrLockerOrScheduledThreadPoolExecutor", rhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor), lhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor, rhsBrokerServiceOrLockerOrScheduledThreadPoolExecutor)) {
                return false;
            }
        }
        {
            Boolean lhsArchiveCorruptedIndex;
            lhsArchiveCorruptedIndex = this.isArchiveCorruptedIndex();
            Boolean rhsArchiveCorruptedIndex;
            rhsArchiveCorruptedIndex = that.isArchiveCorruptedIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "archiveCorruptedIndex", lhsArchiveCorruptedIndex), LocatorUtils.property(thatLocator, "archiveCorruptedIndex", rhsArchiveCorruptedIndex), lhsArchiveCorruptedIndex, rhsArchiveCorruptedIndex)) {
                return false;
            }
        }
        {
            Boolean lhsArchiveDataLogs;
            lhsArchiveDataLogs = this.isArchiveDataLogs();
            Boolean rhsArchiveDataLogs;
            rhsArchiveDataLogs = that.isArchiveDataLogs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "archiveDataLogs", lhsArchiveDataLogs), LocatorUtils.property(thatLocator, "archiveDataLogs", rhsArchiveDataLogs), lhsArchiveDataLogs, rhsArchiveDataLogs)) {
                return false;
            }
        }
        {
            String lhsBrokerName;
            lhsBrokerName = this.getBrokerName();
            String rhsBrokerName;
            rhsBrokerName = that.getBrokerName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "brokerName", lhsBrokerName), LocatorUtils.property(thatLocator, "brokerName", rhsBrokerName), lhsBrokerName, rhsBrokerName)) {
                return false;
            }
        }
        {
            String lhsBrokerService;
            lhsBrokerService = this.getBrokerService();
            String rhsBrokerService;
            rhsBrokerService = that.getBrokerService();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "brokerService", lhsBrokerService), LocatorUtils.property(thatLocator, "brokerService", rhsBrokerService), lhsBrokerService, rhsBrokerService)) {
                return false;
            }
        }
        {
            Boolean lhsCheckForCorruptJournalFiles;
            lhsCheckForCorruptJournalFiles = this.isCheckForCorruptJournalFiles();
            Boolean rhsCheckForCorruptJournalFiles;
            rhsCheckForCorruptJournalFiles = that.isCheckForCorruptJournalFiles();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "checkForCorruptJournalFiles", lhsCheckForCorruptJournalFiles), LocatorUtils.property(thatLocator, "checkForCorruptJournalFiles", rhsCheckForCorruptJournalFiles), lhsCheckForCorruptJournalFiles, rhsCheckForCorruptJournalFiles)) {
                return false;
            }
        }
        {
            Long lhsCheckpointInterval;
            lhsCheckpointInterval = this.getCheckpointInterval();
            Long rhsCheckpointInterval;
            rhsCheckpointInterval = that.getCheckpointInterval();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "checkpointInterval", lhsCheckpointInterval), LocatorUtils.property(thatLocator, "checkpointInterval", rhsCheckpointInterval), lhsCheckpointInterval, rhsCheckpointInterval)) {
                return false;
            }
        }
        {
            Boolean lhsChecksumJournalFiles;
            lhsChecksumJournalFiles = this.isChecksumJournalFiles();
            Boolean rhsChecksumJournalFiles;
            rhsChecksumJournalFiles = that.isChecksumJournalFiles();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "checksumJournalFiles", lhsChecksumJournalFiles), LocatorUtils.property(thatLocator, "checksumJournalFiles", rhsChecksumJournalFiles), lhsChecksumJournalFiles, rhsChecksumJournalFiles)) {
                return false;
            }
        }
        {
            Long lhsCleanupInterval;
            lhsCleanupInterval = this.getCleanupInterval();
            Long rhsCleanupInterval;
            rhsCleanupInterval = that.getCleanupInterval();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cleanupInterval", lhsCleanupInterval), LocatorUtils.property(thatLocator, "cleanupInterval", rhsCleanupInterval), lhsCleanupInterval, rhsCleanupInterval)) {
                return false;
            }
        }
        {
            BigInteger lhsCompactAcksAfterNoGC;
            lhsCompactAcksAfterNoGC = this.getCompactAcksAfterNoGC();
            BigInteger rhsCompactAcksAfterNoGC;
            rhsCompactAcksAfterNoGC = that.getCompactAcksAfterNoGC();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "compactAcksAfterNoGC", lhsCompactAcksAfterNoGC), LocatorUtils.property(thatLocator, "compactAcksAfterNoGC", rhsCompactAcksAfterNoGC), lhsCompactAcksAfterNoGC, rhsCompactAcksAfterNoGC)) {
                return false;
            }
        }
        {
            Boolean lhsCompactAcksIgnoresStoreGrowth;
            lhsCompactAcksIgnoresStoreGrowth = this.isCompactAcksIgnoresStoreGrowth();
            Boolean rhsCompactAcksIgnoresStoreGrowth;
            rhsCompactAcksIgnoresStoreGrowth = that.isCompactAcksIgnoresStoreGrowth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "compactAcksIgnoresStoreGrowth", lhsCompactAcksIgnoresStoreGrowth), LocatorUtils.property(thatLocator, "compactAcksIgnoresStoreGrowth", rhsCompactAcksIgnoresStoreGrowth), lhsCompactAcksIgnoresStoreGrowth, rhsCompactAcksIgnoresStoreGrowth)) {
                return false;
            }
        }
        {
            Boolean lhsConcurrentStoreAndDispatchQueues;
            lhsConcurrentStoreAndDispatchQueues = this.isConcurrentStoreAndDispatchQueues();
            Boolean rhsConcurrentStoreAndDispatchQueues;
            rhsConcurrentStoreAndDispatchQueues = that.isConcurrentStoreAndDispatchQueues();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concurrentStoreAndDispatchQueues", lhsConcurrentStoreAndDispatchQueues), LocatorUtils.property(thatLocator, "concurrentStoreAndDispatchQueues", rhsConcurrentStoreAndDispatchQueues), lhsConcurrentStoreAndDispatchQueues, rhsConcurrentStoreAndDispatchQueues)) {
                return false;
            }
        }
        {
            Boolean lhsConcurrentStoreAndDispatchTopics;
            lhsConcurrentStoreAndDispatchTopics = this.isConcurrentStoreAndDispatchTopics();
            Boolean rhsConcurrentStoreAndDispatchTopics;
            rhsConcurrentStoreAndDispatchTopics = that.isConcurrentStoreAndDispatchTopics();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concurrentStoreAndDispatchTopics", lhsConcurrentStoreAndDispatchTopics), LocatorUtils.property(thatLocator, "concurrentStoreAndDispatchTopics", rhsConcurrentStoreAndDispatchTopics), lhsConcurrentStoreAndDispatchTopics, rhsConcurrentStoreAndDispatchTopics)) {
                return false;
            }
        }
        {
            BigInteger lhsDatabaseLockedWaitDelay;
            lhsDatabaseLockedWaitDelay = this.getDatabaseLockedWaitDelay();
            BigInteger rhsDatabaseLockedWaitDelay;
            rhsDatabaseLockedWaitDelay = that.getDatabaseLockedWaitDelay();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "databaseLockedWaitDelay", lhsDatabaseLockedWaitDelay), LocatorUtils.property(thatLocator, "databaseLockedWaitDelay", rhsDatabaseLockedWaitDelay), lhsDatabaseLockedWaitDelay, rhsDatabaseLockedWaitDelay)) {
                return false;
            }
        }
        {
            String lhsDirectory;
            lhsDirectory = this.getDirectory();
            String rhsDirectory;
            rhsDirectory = that.getDirectory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directory", lhsDirectory), LocatorUtils.property(thatLocator, "directory", rhsDirectory), lhsDirectory, rhsDirectory)) {
                return false;
            }
        }
        {
            String lhsDirectoryArchive;
            lhsDirectoryArchive = this.getDirectoryArchive();
            String rhsDirectoryArchive;
            rhsDirectoryArchive = that.getDirectoryArchive();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "directoryArchive", lhsDirectoryArchive), LocatorUtils.property(thatLocator, "directoryArchive", rhsDirectoryArchive), lhsDirectoryArchive, rhsDirectoryArchive)) {
                return false;
            }
        }
        {
            Boolean lhsEnableAckCompaction;
            lhsEnableAckCompaction = this.isEnableAckCompaction();
            Boolean rhsEnableAckCompaction;
            rhsEnableAckCompaction = that.isEnableAckCompaction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableAckCompaction", lhsEnableAckCompaction), LocatorUtils.property(thatLocator, "enableAckCompaction", rhsEnableAckCompaction), lhsEnableAckCompaction, rhsEnableAckCompaction)) {
                return false;
            }
        }
        {
            Boolean lhsEnableIndexDiskSyncs;
            lhsEnableIndexDiskSyncs = this.isEnableIndexDiskSyncs();
            Boolean rhsEnableIndexDiskSyncs;
            rhsEnableIndexDiskSyncs = that.isEnableIndexDiskSyncs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableIndexDiskSyncs", lhsEnableIndexDiskSyncs), LocatorUtils.property(thatLocator, "enableIndexDiskSyncs", rhsEnableIndexDiskSyncs), lhsEnableIndexDiskSyncs, rhsEnableIndexDiskSyncs)) {
                return false;
            }
        }
        {
            Boolean lhsEnableIndexPageCaching;
            lhsEnableIndexPageCaching = this.isEnableIndexPageCaching();
            Boolean rhsEnableIndexPageCaching;
            rhsEnableIndexPageCaching = that.isEnableIndexPageCaching();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableIndexPageCaching", lhsEnableIndexPageCaching), LocatorUtils.property(thatLocator, "enableIndexPageCaching", rhsEnableIndexPageCaching), lhsEnableIndexPageCaching, rhsEnableIndexPageCaching)) {
                return false;
            }
        }
        {
            Boolean lhsEnableIndexRecoveryFile;
            lhsEnableIndexRecoveryFile = this.isEnableIndexRecoveryFile();
            Boolean rhsEnableIndexRecoveryFile;
            rhsEnableIndexRecoveryFile = that.isEnableIndexRecoveryFile();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableIndexRecoveryFile", lhsEnableIndexRecoveryFile), LocatorUtils.property(thatLocator, "enableIndexRecoveryFile", rhsEnableIndexRecoveryFile), lhsEnableIndexRecoveryFile, rhsEnableIndexRecoveryFile)) {
                return false;
            }
        }
        {
            Boolean lhsEnableIndexWriteAsync;
            lhsEnableIndexWriteAsync = this.isEnableIndexWriteAsync();
            Boolean rhsEnableIndexWriteAsync;
            rhsEnableIndexWriteAsync = that.isEnableIndexWriteAsync();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableIndexWriteAsync", lhsEnableIndexWriteAsync), LocatorUtils.property(thatLocator, "enableIndexWriteAsync", rhsEnableIndexWriteAsync), lhsEnableIndexWriteAsync, rhsEnableIndexWriteAsync)) {
                return false;
            }
        }
        {
            Boolean lhsEnableJournalDiskSyncs;
            lhsEnableJournalDiskSyncs = this.isEnableJournalDiskSyncs();
            Boolean rhsEnableJournalDiskSyncs;
            rhsEnableJournalDiskSyncs = that.isEnableJournalDiskSyncs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableJournalDiskSyncs", lhsEnableJournalDiskSyncs), LocatorUtils.property(thatLocator, "enableJournalDiskSyncs", rhsEnableJournalDiskSyncs), lhsEnableJournalDiskSyncs, rhsEnableJournalDiskSyncs)) {
                return false;
            }
        }
        {
            Boolean lhsEnableSubscriptionStatistics;
            lhsEnableSubscriptionStatistics = this.isEnableSubscriptionStatistics();
            Boolean rhsEnableSubscriptionStatistics;
            rhsEnableSubscriptionStatistics = that.isEnableSubscriptionStatistics();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "enableSubscriptionStatistics", lhsEnableSubscriptionStatistics), LocatorUtils.property(thatLocator, "enableSubscriptionStatistics", rhsEnableSubscriptionStatistics), lhsEnableSubscriptionStatistics, rhsEnableSubscriptionStatistics)) {
                return false;
            }
        }
        {
            BigInteger lhsFailoverProducersAuditDepth;
            lhsFailoverProducersAuditDepth = this.getFailoverProducersAuditDepth();
            BigInteger rhsFailoverProducersAuditDepth;
            rhsFailoverProducersAuditDepth = that.getFailoverProducersAuditDepth();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "failoverProducersAuditDepth", lhsFailoverProducersAuditDepth), LocatorUtils.property(thatLocator, "failoverProducersAuditDepth", rhsFailoverProducersAuditDepth), lhsFailoverProducersAuditDepth, rhsFailoverProducersAuditDepth)) {
                return false;
            }
        }
        {
            Boolean lhsForceRecoverIndex;
            lhsForceRecoverIndex = this.isForceRecoverIndex();
            Boolean rhsForceRecoverIndex;
            rhsForceRecoverIndex = that.isForceRecoverIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "forceRecoverIndex", lhsForceRecoverIndex), LocatorUtils.property(thatLocator, "forceRecoverIndex", rhsForceRecoverIndex), lhsForceRecoverIndex, rhsForceRecoverIndex)) {
                return false;
            }
        }
        {
            Boolean lhsIgnoreMissingJournalfiles;
            lhsIgnoreMissingJournalfiles = this.isIgnoreMissingJournalfiles();
            Boolean rhsIgnoreMissingJournalfiles;
            rhsIgnoreMissingJournalfiles = that.isIgnoreMissingJournalfiles();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ignoreMissingJournalfiles", lhsIgnoreMissingJournalfiles), LocatorUtils.property(thatLocator, "ignoreMissingJournalfiles", rhsIgnoreMissingJournalfiles), lhsIgnoreMissingJournalfiles, rhsIgnoreMissingJournalfiles)) {
                return false;
            }
        }
        {
            String lhsIndexCacheSize;
            lhsIndexCacheSize = this.getIndexCacheSize();
            String rhsIndexCacheSize;
            rhsIndexCacheSize = that.getIndexCacheSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexCacheSize", lhsIndexCacheSize), LocatorUtils.property(thatLocator, "indexCacheSize", rhsIndexCacheSize), lhsIndexCacheSize, rhsIndexCacheSize)) {
                return false;
            }
        }
        {
            String lhsIndexDirectory;
            lhsIndexDirectory = this.getIndexDirectory();
            String rhsIndexDirectory;
            rhsIndexDirectory = that.getIndexDirectory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexDirectory", lhsIndexDirectory), LocatorUtils.property(thatLocator, "indexDirectory", rhsIndexDirectory), lhsIndexDirectory, rhsIndexDirectory)) {
                return false;
            }
        }
        {
            Float lhsIndexLFUEvictionFactor;
            lhsIndexLFUEvictionFactor = this.getIndexLFUEvictionFactor();
            Float rhsIndexLFUEvictionFactor;
            rhsIndexLFUEvictionFactor = that.getIndexLFUEvictionFactor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexLFUEvictionFactor", lhsIndexLFUEvictionFactor), LocatorUtils.property(thatLocator, "indexLFUEvictionFactor", rhsIndexLFUEvictionFactor), lhsIndexLFUEvictionFactor, rhsIndexLFUEvictionFactor)) {
                return false;
            }
        }
        {
            String lhsIndexWriteBatchSize;
            lhsIndexWriteBatchSize = this.getIndexWriteBatchSize();
            String rhsIndexWriteBatchSize;
            rhsIndexWriteBatchSize = that.getIndexWriteBatchSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "indexWriteBatchSize", lhsIndexWriteBatchSize), LocatorUtils.property(thatLocator, "indexWriteBatchSize", rhsIndexWriteBatchSize), lhsIndexWriteBatchSize, rhsIndexWriteBatchSize)) {
                return false;
            }
        }
        {
            Long lhsJournalDiskSyncInterval;
            lhsJournalDiskSyncInterval = this.getJournalDiskSyncInterval();
            Long rhsJournalDiskSyncInterval;
            rhsJournalDiskSyncInterval = that.getJournalDiskSyncInterval();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "journalDiskSyncInterval", lhsJournalDiskSyncInterval), LocatorUtils.property(thatLocator, "journalDiskSyncInterval", rhsJournalDiskSyncInterval), lhsJournalDiskSyncInterval, rhsJournalDiskSyncInterval)) {
                return false;
            }
        }
        {
            String lhsJournalDiskSyncStrategy;
            lhsJournalDiskSyncStrategy = this.getJournalDiskSyncStrategy();
            String rhsJournalDiskSyncStrategy;
            rhsJournalDiskSyncStrategy = that.getJournalDiskSyncStrategy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "journalDiskSyncStrategy", lhsJournalDiskSyncStrategy), LocatorUtils.property(thatLocator, "journalDiskSyncStrategy", rhsJournalDiskSyncStrategy), lhsJournalDiskSyncStrategy, rhsJournalDiskSyncStrategy)) {
                return false;
            }
        }
        {
            String lhsJournalMaxFileLength;
            lhsJournalMaxFileLength = this.getJournalMaxFileLength();
            String rhsJournalMaxFileLength;
            rhsJournalMaxFileLength = that.getJournalMaxFileLength();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "journalMaxFileLength", lhsJournalMaxFileLength), LocatorUtils.property(thatLocator, "journalMaxFileLength", rhsJournalMaxFileLength), lhsJournalMaxFileLength, rhsJournalMaxFileLength)) {
                return false;
            }
        }
        {
            String lhsJournalMaxWriteBatchSize;
            lhsJournalMaxWriteBatchSize = this.getJournalMaxWriteBatchSize();
            String rhsJournalMaxWriteBatchSize;
            rhsJournalMaxWriteBatchSize = that.getJournalMaxWriteBatchSize();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "journalMaxWriteBatchSize", lhsJournalMaxWriteBatchSize), LocatorUtils.property(thatLocator, "journalMaxWriteBatchSize", rhsJournalMaxWriteBatchSize), lhsJournalMaxWriteBatchSize, rhsJournalMaxWriteBatchSize)) {
                return false;
            }
        }
        {
            Long lhsLockKeepAlivePeriod;
            lhsLockKeepAlivePeriod = this.getLockKeepAlivePeriod();
            Long rhsLockKeepAlivePeriod;
            rhsLockKeepAlivePeriod = that.getLockKeepAlivePeriod();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lockKeepAlivePeriod", lhsLockKeepAlivePeriod), LocatorUtils.property(thatLocator, "lockKeepAlivePeriod", rhsLockKeepAlivePeriod), lhsLockKeepAlivePeriod, rhsLockKeepAlivePeriod)) {
                return false;
            }
        }
        {
            String lhsLocker;
            lhsLocker = this.getLocker();
            String rhsLocker;
            rhsLocker = that.getLocker();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "locker", lhsLocker), LocatorUtils.property(thatLocator, "locker", rhsLocker), lhsLocker, rhsLocker)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxAsyncJobs;
            lhsMaxAsyncJobs = this.getMaxAsyncJobs();
            BigInteger rhsMaxAsyncJobs;
            rhsMaxAsyncJobs = that.getMaxAsyncJobs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxAsyncJobs", lhsMaxAsyncJobs), LocatorUtils.property(thatLocator, "maxAsyncJobs", rhsMaxAsyncJobs), lhsMaxAsyncJobs, rhsMaxAsyncJobs)) {
                return false;
            }
        }
        {
            BigInteger lhsMaxFailoverProducersToTrack;
            lhsMaxFailoverProducersToTrack = this.getMaxFailoverProducersToTrack();
            BigInteger rhsMaxFailoverProducersToTrack;
            rhsMaxFailoverProducersToTrack = that.getMaxFailoverProducersToTrack();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "maxFailoverProducersToTrack", lhsMaxFailoverProducersToTrack), LocatorUtils.property(thatLocator, "maxFailoverProducersToTrack", rhsMaxFailoverProducersToTrack), lhsMaxFailoverProducersToTrack, rhsMaxFailoverProducersToTrack)) {
                return false;
            }
        }
        {
            String lhsPreallocationScope;
            lhsPreallocationScope = this.getPreallocationScope();
            String rhsPreallocationScope;
            rhsPreallocationScope = that.getPreallocationScope();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preallocationScope", lhsPreallocationScope), LocatorUtils.property(thatLocator, "preallocationScope", rhsPreallocationScope), lhsPreallocationScope, rhsPreallocationScope)) {
                return false;
            }
        }
        {
            String lhsPreallocationStrategy;
            lhsPreallocationStrategy = this.getPreallocationStrategy();
            String rhsPreallocationStrategy;
            rhsPreallocationStrategy = that.getPreallocationStrategy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "preallocationStrategy", lhsPreallocationStrategy), LocatorUtils.property(thatLocator, "preallocationStrategy", rhsPreallocationStrategy), lhsPreallocationStrategy, rhsPreallocationStrategy)) {
                return false;
            }
        }
        {
            String lhsPurgeRecoveredXATransactionStrategy;
            lhsPurgeRecoveredXATransactionStrategy = this.getPurgeRecoveredXATransactionStrategy();
            String rhsPurgeRecoveredXATransactionStrategy;
            rhsPurgeRecoveredXATransactionStrategy = that.getPurgeRecoveredXATransactionStrategy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "purgeRecoveredXATransactionStrategy", lhsPurgeRecoveredXATransactionStrategy), LocatorUtils.property(thatLocator, "purgeRecoveredXATransactionStrategy", rhsPurgeRecoveredXATransactionStrategy), lhsPurgeRecoveredXATransactionStrategy, rhsPurgeRecoveredXATransactionStrategy)) {
                return false;
            }
        }
        {
            String lhsScheduledThreadPoolExecutor;
            lhsScheduledThreadPoolExecutor = this.getScheduledThreadPoolExecutor();
            String rhsScheduledThreadPoolExecutor;
            rhsScheduledThreadPoolExecutor = that.getScheduledThreadPoolExecutor();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "scheduledThreadPoolExecutor", lhsScheduledThreadPoolExecutor), LocatorUtils.property(thatLocator, "scheduledThreadPoolExecutor", rhsScheduledThreadPoolExecutor), lhsScheduledThreadPoolExecutor, rhsScheduledThreadPoolExecutor)) {
                return false;
            }
        }
        {
            String lhsTransactionIdTransformer;
            lhsTransactionIdTransformer = this.getTransactionIdTransformer();
            String rhsTransactionIdTransformer;
            rhsTransactionIdTransformer = that.getTransactionIdTransformer();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transactionIdTransformer", lhsTransactionIdTransformer), LocatorUtils.property(thatLocator, "transactionIdTransformer", rhsTransactionIdTransformer), lhsTransactionIdTransformer, rhsTransactionIdTransformer)) {
                return false;
            }
        }
        {
            String lhsUsageManager;
            lhsUsageManager = this.getUsageManager();
            String rhsUsageManager;
            rhsUsageManager = that.getUsageManager();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "usageManager", lhsUsageManager), LocatorUtils.property(thatLocator, "usageManager", rhsUsageManager), lhsUsageManager, rhsUsageManager)) {
                return false;
            }
        }
        {
            Boolean lhsUseIndexLFRUEviction;
            lhsUseIndexLFRUEviction = this.isUseIndexLFRUEviction();
            Boolean rhsUseIndexLFRUEviction;
            rhsUseIndexLFRUEviction = that.isUseIndexLFRUEviction();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "useIndexLFRUEviction", lhsUseIndexLFRUEviction), LocatorUtils.property(thatLocator, "useIndexLFRUEviction", rhsUseIndexLFRUEviction), lhsUseIndexLFRUEviction, rhsUseIndexLFRUEviction)) {
                return false;
            }
        }
        {
            Boolean lhsUseLock;
            lhsUseLock = this.isUseLock();
            Boolean rhsUseLock;
            rhsUseLock = that.isUseLock();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "useLock", lhsUseLock), LocatorUtils.property(thatLocator, "useLock", rhsUseLock), lhsUseLock, rhsUseLock)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = new org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy();
        return equals(null, null, object, strategy);
    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;choice minOccurs="0">
     *         &lt;element ref="{http://activemq.apache.org/schema/core}broker"/>
     *         &lt;element ref="{http://activemq.apache.org/schema/core}brokerService"/>
     *         &lt;any namespace='##other'/>
     *       &lt;/choice>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "broker",
        "brokerService",
        "any"
    })
    public static class BrokerService
        implements Equals, HashCode, ToString
    {

        protected DtoBroker broker;
        protected DtoBrokerService brokerService;
        @XmlAnyElement(lax = true)
        protected Object any;

        /**
         * Gets the value of the broker property.
         * 
         * @return
         *     possible object is
         *     {@link DtoBroker }
         *     
         */
        public DtoBroker getBroker() {
            return broker;
        }

        /**
         * Sets the value of the broker property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoBroker }
         *     
         */
        public void setBroker(DtoBroker value) {
            this.broker = value;
        }

        /**
         * Gets the value of the brokerService property.
         * 
         * @return
         *     possible object is
         *     {@link DtoBrokerService }
         *     
         */
        public DtoBrokerService getBrokerService() {
            return brokerService;
        }

        /**
         * Sets the value of the brokerService property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoBrokerService }
         *     
         */
        public void setBrokerService(DtoBrokerService value) {
            this.brokerService = value;
        }

        /**
         * Gets the value of the any property.
         * 
         * @return
         *     possible object is
         *     {@link Object }
         *     
         */
        public Object getAny() {
            return any;
        }

        /**
         * Sets the value of the any property.
         * 
         * @param value
         *     allowed object is
         *     {@link Object }
         *     
         */
        public void setAny(Object value) {
            this.any = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                DtoBroker theBroker;
                theBroker = this.getBroker();
                strategy.appendField(locator, this, "broker", buffer, theBroker);
            }
            {
                DtoBrokerService theBrokerService;
                theBrokerService = this.getBrokerService();
                strategy.appendField(locator, this, "brokerService", buffer, theBrokerService);
            }
            {
                Object theAny;
                theAny = this.getAny();
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            return buffer;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                DtoBroker theBroker;
                theBroker = this.getBroker();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "broker", theBroker), currentHashCode, theBroker);
            }
            {
                DtoBrokerService theBrokerService;
                theBrokerService = this.getBrokerService();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "brokerService", theBrokerService), currentHashCode, theBrokerService);
            }
            {
                Object theAny;
                theAny = this.getAny();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DtoKahaDB.BrokerService)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DtoKahaDB.BrokerService that = ((DtoKahaDB.BrokerService) object);
            {
                DtoBroker lhsBroker;
                lhsBroker = this.getBroker();
                DtoBroker rhsBroker;
                rhsBroker = that.getBroker();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "broker", lhsBroker), LocatorUtils.property(thatLocator, "broker", rhsBroker), lhsBroker, rhsBroker)) {
                    return false;
                }
            }
            {
                DtoBrokerService lhsBrokerService;
                lhsBrokerService = this.getBrokerService();
                DtoBrokerService rhsBrokerService;
                rhsBrokerService = that.getBrokerService();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "brokerService", lhsBrokerService), LocatorUtils.property(thatLocator, "brokerService", rhsBrokerService), lhsBrokerService, rhsBrokerService)) {
                    return false;
                }
            }
            {
                Object lhsAny;
                lhsAny = this.getAny();
                Object rhsAny;
                rhsAny = that.getAny();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = new org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy();
            return equals(null, null, object, strategy);
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;choice minOccurs="0">
     *         &lt;element ref="{http://activemq.apache.org/schema/core}database-locker"/>
     *         &lt;element ref="{http://activemq.apache.org/schema/core}lease-database-locker"/>
     *         &lt;element ref="{http://activemq.apache.org/schema/core}shared-file-locker"/>
     *         &lt;element ref="{http://activemq.apache.org/schema/core}transact-database-locker"/>
     *         &lt;any namespace='##other'/>
     *       &lt;/choice>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "databaseLocker",
        "leaseDatabaseLocker",
        "sharedFileLocker",
        "transactDatabaseLocker",
        "any"
    })
    public static class Locker
        implements Equals, HashCode, ToString
    {

        @XmlElement(name = "database-locker")
        protected DtoDatabaseLocker databaseLocker;
        @XmlElement(name = "lease-database-locker")
        protected DtoLeaseDatabaseLocker leaseDatabaseLocker;
        @XmlElement(name = "shared-file-locker")
        protected DtoSharedFileLocker sharedFileLocker;
        @XmlElement(name = "transact-database-locker")
        protected DtoTransactDatabaseLocker transactDatabaseLocker;
        @XmlAnyElement(lax = true)
        protected Object any;

        /**
         * Gets the value of the databaseLocker property.
         * 
         * @return
         *     possible object is
         *     {@link DtoDatabaseLocker }
         *     
         */
        public DtoDatabaseLocker getDatabaseLocker() {
            return databaseLocker;
        }

        /**
         * Sets the value of the databaseLocker property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoDatabaseLocker }
         *     
         */
        public void setDatabaseLocker(DtoDatabaseLocker value) {
            this.databaseLocker = value;
        }

        /**
         * Gets the value of the leaseDatabaseLocker property.
         * 
         * @return
         *     possible object is
         *     {@link DtoLeaseDatabaseLocker }
         *     
         */
        public DtoLeaseDatabaseLocker getLeaseDatabaseLocker() {
            return leaseDatabaseLocker;
        }

        /**
         * Sets the value of the leaseDatabaseLocker property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoLeaseDatabaseLocker }
         *     
         */
        public void setLeaseDatabaseLocker(DtoLeaseDatabaseLocker value) {
            this.leaseDatabaseLocker = value;
        }

        /**
         * Gets the value of the sharedFileLocker property.
         * 
         * @return
         *     possible object is
         *     {@link DtoSharedFileLocker }
         *     
         */
        public DtoSharedFileLocker getSharedFileLocker() {
            return sharedFileLocker;
        }

        /**
         * Sets the value of the sharedFileLocker property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoSharedFileLocker }
         *     
         */
        public void setSharedFileLocker(DtoSharedFileLocker value) {
            this.sharedFileLocker = value;
        }

        /**
         * Gets the value of the transactDatabaseLocker property.
         * 
         * @return
         *     possible object is
         *     {@link DtoTransactDatabaseLocker }
         *     
         */
        public DtoTransactDatabaseLocker getTransactDatabaseLocker() {
            return transactDatabaseLocker;
        }

        /**
         * Sets the value of the transactDatabaseLocker property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoTransactDatabaseLocker }
         *     
         */
        public void setTransactDatabaseLocker(DtoTransactDatabaseLocker value) {
            this.transactDatabaseLocker = value;
        }

        /**
         * Gets the value of the any property.
         * 
         * @return
         *     possible object is
         *     {@link Object }
         *     
         */
        public Object getAny() {
            return any;
        }

        /**
         * Sets the value of the any property.
         * 
         * @param value
         *     allowed object is
         *     {@link Object }
         *     
         */
        public void setAny(Object value) {
            this.any = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                DtoDatabaseLocker theDatabaseLocker;
                theDatabaseLocker = this.getDatabaseLocker();
                strategy.appendField(locator, this, "databaseLocker", buffer, theDatabaseLocker);
            }
            {
                DtoLeaseDatabaseLocker theLeaseDatabaseLocker;
                theLeaseDatabaseLocker = this.getLeaseDatabaseLocker();
                strategy.appendField(locator, this, "leaseDatabaseLocker", buffer, theLeaseDatabaseLocker);
            }
            {
                DtoSharedFileLocker theSharedFileLocker;
                theSharedFileLocker = this.getSharedFileLocker();
                strategy.appendField(locator, this, "sharedFileLocker", buffer, theSharedFileLocker);
            }
            {
                DtoTransactDatabaseLocker theTransactDatabaseLocker;
                theTransactDatabaseLocker = this.getTransactDatabaseLocker();
                strategy.appendField(locator, this, "transactDatabaseLocker", buffer, theTransactDatabaseLocker);
            }
            {
                Object theAny;
                theAny = this.getAny();
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            return buffer;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                DtoDatabaseLocker theDatabaseLocker;
                theDatabaseLocker = this.getDatabaseLocker();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "databaseLocker", theDatabaseLocker), currentHashCode, theDatabaseLocker);
            }
            {
                DtoLeaseDatabaseLocker theLeaseDatabaseLocker;
                theLeaseDatabaseLocker = this.getLeaseDatabaseLocker();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "leaseDatabaseLocker", theLeaseDatabaseLocker), currentHashCode, theLeaseDatabaseLocker);
            }
            {
                DtoSharedFileLocker theSharedFileLocker;
                theSharedFileLocker = this.getSharedFileLocker();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sharedFileLocker", theSharedFileLocker), currentHashCode, theSharedFileLocker);
            }
            {
                DtoTransactDatabaseLocker theTransactDatabaseLocker;
                theTransactDatabaseLocker = this.getTransactDatabaseLocker();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transactDatabaseLocker", theTransactDatabaseLocker), currentHashCode, theTransactDatabaseLocker);
            }
            {
                Object theAny;
                theAny = this.getAny();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DtoKahaDB.Locker)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DtoKahaDB.Locker that = ((DtoKahaDB.Locker) object);
            {
                DtoDatabaseLocker lhsDatabaseLocker;
                lhsDatabaseLocker = this.getDatabaseLocker();
                DtoDatabaseLocker rhsDatabaseLocker;
                rhsDatabaseLocker = that.getDatabaseLocker();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "databaseLocker", lhsDatabaseLocker), LocatorUtils.property(thatLocator, "databaseLocker", rhsDatabaseLocker), lhsDatabaseLocker, rhsDatabaseLocker)) {
                    return false;
                }
            }
            {
                DtoLeaseDatabaseLocker lhsLeaseDatabaseLocker;
                lhsLeaseDatabaseLocker = this.getLeaseDatabaseLocker();
                DtoLeaseDatabaseLocker rhsLeaseDatabaseLocker;
                rhsLeaseDatabaseLocker = that.getLeaseDatabaseLocker();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "leaseDatabaseLocker", lhsLeaseDatabaseLocker), LocatorUtils.property(thatLocator, "leaseDatabaseLocker", rhsLeaseDatabaseLocker), lhsLeaseDatabaseLocker, rhsLeaseDatabaseLocker)) {
                    return false;
                }
            }
            {
                DtoSharedFileLocker lhsSharedFileLocker;
                lhsSharedFileLocker = this.getSharedFileLocker();
                DtoSharedFileLocker rhsSharedFileLocker;
                rhsSharedFileLocker = that.getSharedFileLocker();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "sharedFileLocker", lhsSharedFileLocker), LocatorUtils.property(thatLocator, "sharedFileLocker", rhsSharedFileLocker), lhsSharedFileLocker, rhsSharedFileLocker)) {
                    return false;
                }
            }
            {
                DtoTransactDatabaseLocker lhsTransactDatabaseLocker;
                lhsTransactDatabaseLocker = this.getTransactDatabaseLocker();
                DtoTransactDatabaseLocker rhsTransactDatabaseLocker;
                rhsTransactDatabaseLocker = that.getTransactDatabaseLocker();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "transactDatabaseLocker", lhsTransactDatabaseLocker), LocatorUtils.property(thatLocator, "transactDatabaseLocker", rhsTransactDatabaseLocker), lhsTransactDatabaseLocker, rhsTransactDatabaseLocker)) {
                    return false;
                }
            }
            {
                Object lhsAny;
                lhsAny = this.getAny();
                Object rhsAny;
                rhsAny = that.getAny();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = new org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy();
            return equals(null, null, object, strategy);
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence minOccurs="0">
     *         &lt;any maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "any"
    })
    public static class ScheduledThreadPoolExecutor
        implements Equals, HashCode, ToString
    {

        @XmlAnyElement(lax = true)
        protected List<Object> any;

        /**
         * Gets the value of the any property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the any property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAny().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Object }
         * 
         * 
         */
        public List<Object> getAny() {
            if (any == null) {
                any = new ArrayList<Object>();
            }
            return this.any;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Object> theAny;
                theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            return buffer;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Object> theAny;
                theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DtoKahaDB.ScheduledThreadPoolExecutor)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DtoKahaDB.ScheduledThreadPoolExecutor that = ((DtoKahaDB.ScheduledThreadPoolExecutor) object);
            {
                List<Object> lhsAny;
                lhsAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                List<Object> rhsAny;
                rhsAny = (((that.any!= null)&&(!that.any.isEmpty()))?that.getAny():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = new org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy();
            return equals(null, null, object, strategy);
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;sequence minOccurs="0">
     *         &lt;any maxOccurs="unbounded" minOccurs="0"/>
     *       &lt;/sequence>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "any"
    })
    public static class TransactionIdTransformer
        implements Equals, HashCode, ToString
    {

        @XmlAnyElement(lax = true)
        protected List<Object> any;

        /**
         * Gets the value of the any property.
         * 
         * <p>
         * This accessor method returns a reference to the live list,
         * not a snapshot. Therefore any modification you make to the
         * returned list will be present inside the JAXB object.
         * This is why there is not a <CODE>set</CODE> method for the any property.
         * 
         * <p>
         * For example, to add a new item, do as follows:
         * <pre>
         *    getAny().add(newItem);
         * </pre>
         * 
         * 
         * <p>
         * Objects of the following type(s) are allowed in the list
         * {@link Object }
         * 
         * 
         */
        public List<Object> getAny() {
            if (any == null) {
                any = new ArrayList<Object>();
            }
            return this.any;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                List<Object> theAny;
                theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            return buffer;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                List<Object> theAny;
                theAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DtoKahaDB.TransactionIdTransformer)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DtoKahaDB.TransactionIdTransformer that = ((DtoKahaDB.TransactionIdTransformer) object);
            {
                List<Object> lhsAny;
                lhsAny = (((this.any!= null)&&(!this.any.isEmpty()))?this.getAny():null);
                List<Object> rhsAny;
                rhsAny = (((that.any!= null)&&(!that.any.isEmpty()))?that.getAny():null);
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = new org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy();
            return equals(null, null, object, strategy);
        }

    }


    /**
     * <p>Java class for anonymous complex type.
     * 
     * <p>The following schema fragment specifies the expected content contained within this class.
     * 
     * <pre>
     * &lt;complexType>
     *   &lt;complexContent>
     *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
     *       &lt;choice minOccurs="0">
     *         &lt;element ref="{http://activemq.apache.org/schema/core}systemUsage"/>
     *         &lt;any namespace='##other'/>
     *       &lt;/choice>
     *     &lt;/restriction>
     *   &lt;/complexContent>
     * &lt;/complexType>
     * </pre>
     * 
     * 
     */
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "", propOrder = {
        "systemUsage",
        "any"
    })
    public static class UsageManager
        implements Equals, HashCode, ToString
    {

        protected DtoSystemUsage systemUsage;
        @XmlAnyElement(lax = true)
        protected Object any;

        /**
         * Gets the value of the systemUsage property.
         * 
         * @return
         *     possible object is
         *     {@link DtoSystemUsage }
         *     
         */
        public DtoSystemUsage getSystemUsage() {
            return systemUsage;
        }

        /**
         * Sets the value of the systemUsage property.
         * 
         * @param value
         *     allowed object is
         *     {@link DtoSystemUsage }
         *     
         */
        public void setSystemUsage(DtoSystemUsage value) {
            this.systemUsage = value;
        }

        /**
         * Gets the value of the any property.
         * 
         * @return
         *     possible object is
         *     {@link Object }
         *     
         */
        public Object getAny() {
            return any;
        }

        /**
         * Sets the value of the any property.
         * 
         * @param value
         *     allowed object is
         *     {@link Object }
         *     
         */
        public void setAny(Object value) {
            this.any = value;
        }

        public String toString() {
            final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
            final StringBuilder buffer = new StringBuilder();
            append(null, buffer, strategy);
            return buffer.toString();
        }

        public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            strategy.appendStart(locator, this, buffer);
            appendFields(locator, buffer, strategy);
            strategy.appendEnd(locator, this, buffer);
            return buffer;
        }

        public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
            {
                DtoSystemUsage theSystemUsage;
                theSystemUsage = this.getSystemUsage();
                strategy.appendField(locator, this, "systemUsage", buffer, theSystemUsage);
            }
            {
                Object theAny;
                theAny = this.getAny();
                strategy.appendField(locator, this, "any", buffer, theAny);
            }
            return buffer;
        }

        public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
            int currentHashCode = 1;
            {
                DtoSystemUsage theSystemUsage;
                theSystemUsage = this.getSystemUsage();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "systemUsage", theSystemUsage), currentHashCode, theSystemUsage);
            }
            {
                Object theAny;
                theAny = this.getAny();
                currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "any", theAny), currentHashCode, theAny);
            }
            return currentHashCode;
        }

        public int hashCode() {
            final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
            return this.hashCode(null, strategy);
        }

        public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
            if (!(object instanceof DtoKahaDB.UsageManager)) {
                return false;
            }
            if (this == object) {
                return true;
            }
            final DtoKahaDB.UsageManager that = ((DtoKahaDB.UsageManager) object);
            {
                DtoSystemUsage lhsSystemUsage;
                lhsSystemUsage = this.getSystemUsage();
                DtoSystemUsage rhsSystemUsage;
                rhsSystemUsage = that.getSystemUsage();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "systemUsage", lhsSystemUsage), LocatorUtils.property(thatLocator, "systemUsage", rhsSystemUsage), lhsSystemUsage, rhsSystemUsage)) {
                    return false;
                }
            }
            {
                Object lhsAny;
                lhsAny = this.getAny();
                Object rhsAny;
                rhsAny = that.getAny();
                if (!strategy.equals(LocatorUtils.property(thisLocator, "any", lhsAny), LocatorUtils.property(thatLocator, "any", rhsAny), lhsAny, rhsAny)) {
                    return false;
                }
            }
            return true;
        }

        public boolean equals(Object object) {
            final EqualsStrategy strategy = new org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy();
            return equals(null, null, object, strategy);
        }

    }

}
