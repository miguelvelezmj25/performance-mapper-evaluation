//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.10-b140310.1920 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.09.14 at 01:47:22 PM EDT 
//


package org.apache.activemq.schema.core;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="concurrentSend" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="local" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="name" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="postfix" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="prefix" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="selectorAware" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="transactedSend" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "virtualTopic")
public class DtoVirtualTopic implements Equals, HashCode, ToString
{

    @XmlAttribute(name = "concurrentSend")
    protected Boolean concurrentSend;
    @XmlAttribute(name = "local")
    protected Boolean local;
    @XmlAttribute(name = "name")
    protected String name;
    @XmlAttribute(name = "postfix")
    protected String postfix;
    @XmlAttribute(name = "prefix")
    protected String prefix;
    @XmlAttribute(name = "selectorAware")
    protected Boolean selectorAware;
    @XmlAttribute(name = "transactedSend")
    protected Boolean transactedSend;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the concurrentSend property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isConcurrentSend() {
        return concurrentSend;
    }

    /**
     * Sets the value of the concurrentSend property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setConcurrentSend(Boolean value) {
        this.concurrentSend = value;
    }

    /**
     * Gets the value of the local property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isLocal() {
        return local;
    }

    /**
     * Sets the value of the local property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setLocal(Boolean value) {
        this.local = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the postfix property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPostfix() {
        return postfix;
    }

    /**
     * Sets the value of the postfix property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPostfix(String value) {
        this.postfix = value;
    }

    /**
     * Gets the value of the prefix property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPrefix() {
        return prefix;
    }

    /**
     * Sets the value of the prefix property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPrefix(String value) {
        this.prefix = value;
    }

    /**
     * Gets the value of the selectorAware property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isSelectorAware() {
        return selectorAware;
    }

    /**
     * Sets the value of the selectorAware property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setSelectorAware(Boolean value) {
        this.selectorAware = value;
    }

    /**
     * Gets the value of the transactedSend property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isTransactedSend() {
        return transactedSend;
    }

    /**
     * Sets the value of the transactedSend property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setTransactedSend(Boolean value) {
        this.transactedSend = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Boolean theConcurrentSend;
            theConcurrentSend = this.isConcurrentSend();
            strategy.appendField(locator, this, "concurrentSend", buffer, theConcurrentSend);
        }
        {
            Boolean theLocal;
            theLocal = this.isLocal();
            strategy.appendField(locator, this, "local", buffer, theLocal);
        }
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String thePostfix;
            thePostfix = this.getPostfix();
            strategy.appendField(locator, this, "postfix", buffer, thePostfix);
        }
        {
            String thePrefix;
            thePrefix = this.getPrefix();
            strategy.appendField(locator, this, "prefix", buffer, thePrefix);
        }
        {
            Boolean theSelectorAware;
            theSelectorAware = this.isSelectorAware();
            strategy.appendField(locator, this, "selectorAware", buffer, theSelectorAware);
        }
        {
            Boolean theTransactedSend;
            theTransactedSend = this.isTransactedSend();
            strategy.appendField(locator, this, "transactedSend", buffer, theTransactedSend);
        }
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        return buffer;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Boolean theConcurrentSend;
            theConcurrentSend = this.isConcurrentSend();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "concurrentSend", theConcurrentSend), currentHashCode, theConcurrentSend);
        }
        {
            Boolean theLocal;
            theLocal = this.isLocal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "local", theLocal), currentHashCode, theLocal);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String thePostfix;
            thePostfix = this.getPostfix();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "postfix", thePostfix), currentHashCode, thePostfix);
        }
        {
            String thePrefix;
            thePrefix = this.getPrefix();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "prefix", thePrefix), currentHashCode, thePrefix);
        }
        {
            Boolean theSelectorAware;
            theSelectorAware = this.isSelectorAware();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "selectorAware", theSelectorAware), currentHashCode, theSelectorAware);
        }
        {
            Boolean theTransactedSend;
            theTransactedSend = this.isTransactedSend();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "transactedSend", theTransactedSend), currentHashCode, theTransactedSend);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DtoVirtualTopic)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DtoVirtualTopic that = ((DtoVirtualTopic) object);
        {
            Boolean lhsConcurrentSend;
            lhsConcurrentSend = this.isConcurrentSend();
            Boolean rhsConcurrentSend;
            rhsConcurrentSend = that.isConcurrentSend();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "concurrentSend", lhsConcurrentSend), LocatorUtils.property(thatLocator, "concurrentSend", rhsConcurrentSend), lhsConcurrentSend, rhsConcurrentSend)) {
                return false;
            }
        }
        {
            Boolean lhsLocal;
            lhsLocal = this.isLocal();
            Boolean rhsLocal;
            rhsLocal = that.isLocal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "local", lhsLocal), LocatorUtils.property(thatLocator, "local", rhsLocal), lhsLocal, rhsLocal)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsPostfix;
            lhsPostfix = this.getPostfix();
            String rhsPostfix;
            rhsPostfix = that.getPostfix();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "postfix", lhsPostfix), LocatorUtils.property(thatLocator, "postfix", rhsPostfix), lhsPostfix, rhsPostfix)) {
                return false;
            }
        }
        {
            String lhsPrefix;
            lhsPrefix = this.getPrefix();
            String rhsPrefix;
            rhsPrefix = that.getPrefix();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "prefix", lhsPrefix), LocatorUtils.property(thatLocator, "prefix", rhsPrefix), lhsPrefix, rhsPrefix)) {
                return false;
            }
        }
        {
            Boolean lhsSelectorAware;
            lhsSelectorAware = this.isSelectorAware();
            Boolean rhsSelectorAware;
            rhsSelectorAware = that.isSelectorAware();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "selectorAware", lhsSelectorAware), LocatorUtils.property(thatLocator, "selectorAware", rhsSelectorAware), lhsSelectorAware, rhsSelectorAware)) {
                return false;
            }
        }
        {
            Boolean lhsTransactedSend;
            lhsTransactedSend = this.isTransactedSend();
            Boolean rhsTransactedSend;
            rhsTransactedSend = that.isTransactedSend();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "transactedSend", lhsTransactedSend), LocatorUtils.property(thatLocator, "transactedSend", rhsTransactedSend), lhsTransactedSend, rhsTransactedSend)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = new ElementAwareEqualsStrategy();
        return equals(null, null, object, strategy);
    }

}
