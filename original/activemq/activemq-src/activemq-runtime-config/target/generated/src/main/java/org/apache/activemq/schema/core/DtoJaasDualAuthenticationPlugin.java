//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.10-b140310.1920 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2018.09.14 at 01:47:22 PM EDT 
//


package org.apache.activemq.schema.core;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyAttribute;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlID;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.apache.activemq.plugin.jaxb2_commons.ElementAwareEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;attribute name="configuration" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="discoverLoginConfig" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="sslConfiguration" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="id" type="{http://www.w3.org/2001/XMLSchema}ID" />
 *       &lt;anyAttribute processContents='lax' namespace='##other'/>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "jaasDualAuthenticationPlugin")
public class DtoJaasDualAuthenticationPlugin implements Equals, HashCode, ToString
{

    @XmlAttribute(name = "configuration")
    protected String configuration;
    @XmlAttribute(name = "discoverLoginConfig")
    protected Boolean discoverLoginConfig;
    @XmlAttribute(name = "sslConfiguration")
    protected String sslConfiguration;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    @XmlID
    @XmlSchemaType(name = "ID")
    protected String id;
    @XmlAnyAttribute
    private Map<QName, String> otherAttributes = new HashMap<QName, String>();

    /**
     * Gets the value of the configuration property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getConfiguration() {
        return configuration;
    }

    /**
     * Sets the value of the configuration property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setConfiguration(String value) {
        this.configuration = value;
    }

    /**
     * Gets the value of the discoverLoginConfig property.
     * 
     * @return
     *     possible object is
     *     {@link Boolean }
     *     
     */
    public Boolean isDiscoverLoginConfig() {
        return discoverLoginConfig;
    }

    /**
     * Sets the value of the discoverLoginConfig property.
     * 
     * @param value
     *     allowed object is
     *     {@link Boolean }
     *     
     */
    public void setDiscoverLoginConfig(Boolean value) {
        this.discoverLoginConfig = value;
    }

    /**
     * Gets the value of the sslConfiguration property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSslConfiguration() {
        return sslConfiguration;
    }

    /**
     * Sets the value of the sslConfiguration property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSslConfiguration(String value) {
        this.sslConfiguration = value;
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets a map that contains attributes that aren't bound to any typed property on this class.
     * 
     * <p>
     * the map is keyed by the name of the attribute and 
     * the value is the string value of the attribute.
     * 
     * the map returned by this method is live, and you can add new attribute
     * by updating the map directly. Because of this design, there's no setter.
     * 
     * 
     * @return
     *     always non-null
     */
    public Map<QName, String> getOtherAttributes() {
        return otherAttributes;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theConfiguration;
            theConfiguration = this.getConfiguration();
            strategy.appendField(locator, this, "configuration", buffer, theConfiguration);
        }
        {
            Boolean theDiscoverLoginConfig;
            theDiscoverLoginConfig = this.isDiscoverLoginConfig();
            strategy.appendField(locator, this, "discoverLoginConfig", buffer, theDiscoverLoginConfig);
        }
        {
            String theSslConfiguration;
            theSslConfiguration = this.getSslConfiguration();
            strategy.appendField(locator, this, "sslConfiguration", buffer, theSslConfiguration);
        }
        {
            String theId;
            theId = this.getId();
            strategy.appendField(locator, this, "id", buffer, theId);
        }
        return buffer;
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theConfiguration;
            theConfiguration = this.getConfiguration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "configuration", theConfiguration), currentHashCode, theConfiguration);
        }
        {
            Boolean theDiscoverLoginConfig;
            theDiscoverLoginConfig = this.isDiscoverLoginConfig();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "discoverLoginConfig", theDiscoverLoginConfig), currentHashCode, theDiscoverLoginConfig);
        }
        {
            String theSslConfiguration;
            theSslConfiguration = this.getSslConfiguration();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sslConfiguration", theSslConfiguration), currentHashCode, theSslConfiguration);
        }
        {
            String theId;
            theId = this.getId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DtoJaasDualAuthenticationPlugin)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DtoJaasDualAuthenticationPlugin that = ((DtoJaasDualAuthenticationPlugin) object);
        {
            String lhsConfiguration;
            lhsConfiguration = this.getConfiguration();
            String rhsConfiguration;
            rhsConfiguration = that.getConfiguration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "configuration", lhsConfiguration), LocatorUtils.property(thatLocator, "configuration", rhsConfiguration), lhsConfiguration, rhsConfiguration)) {
                return false;
            }
        }
        {
            Boolean lhsDiscoverLoginConfig;
            lhsDiscoverLoginConfig = this.isDiscoverLoginConfig();
            Boolean rhsDiscoverLoginConfig;
            rhsDiscoverLoginConfig = that.isDiscoverLoginConfig();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "discoverLoginConfig", lhsDiscoverLoginConfig), LocatorUtils.property(thatLocator, "discoverLoginConfig", rhsDiscoverLoginConfig), lhsDiscoverLoginConfig, rhsDiscoverLoginConfig)) {
                return false;
            }
        }
        {
            String lhsSslConfiguration;
            lhsSslConfiguration = this.getSslConfiguration();
            String rhsSslConfiguration;
            rhsSslConfiguration = that.getSslConfiguration();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sslConfiguration", lhsSslConfiguration), LocatorUtils.property(thatLocator, "sslConfiguration", rhsSslConfiguration), lhsSslConfiguration, rhsSslConfiguration)) {
                return false;
            }
        }
        {
            String lhsId;
            lhsId = this.getId();
            String rhsId;
            rhsId = that.getId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = new ElementAwareEqualsStrategy();
        return equals(null, null, object, strategy);
    }

}
