
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// [date omitted]
//----------------------------------------------------

package configurationGeneration;

import java.util.HashMap;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;

/** CUP v0.11a beta 20060608 generated parser.
  * @version [date omitted]
  */
@SuppressWarnings(value = { "all" }) public  class FeatureModelParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FeatureModelParser() {super();}

  /** Constructor which sets the default scanner. */
  public FeatureModelParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FeatureModelParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\005\000" +
    "\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\012\002\uffff\004\007\011\005\012\010\001" +
    "\002\000\004\002\024\001\002\000\010\004\007\011\005" +
    "\012\010\001\002\000\014\002\001\005\013\006\015\007" +
    "\016\010\012\001\002\000\016\002\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\013\ufff8\001\002\000\010\004\007\011" +
    "\005\012\010\001\002\000\014\005\013\006\015\007\016" +
    "\010\012\013\014\001\002\000\010\004\007\011\005\012" +
    "\010\001\002\000\010\004\007\011\005\012\010\001\002" +
    "\000\016\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\013" +
    "\ufff9\001\002\000\010\004\007\011\005\012\010\001\002" +
    "\000\010\004\007\011\005\012\010\001\002\000\016\002" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\013\ufffc\001\002" +
    "\000\016\002\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\013" +
    "\ufffd\001\002\000\016\002\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\013\ufffe\001\002\000\016\002\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\013\ufffb\001\002\000\016\002\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\013\ufffa\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\003\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\010\001\001\000\002\001\001\000" +
    "\004\003\021\001\001\000\004\003\020\001\001\000\002" +
    "\001\001\000\004\003\017\001\001\000\004\003\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FeatureModelParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FeatureModelParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FeatureModelParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public HashMap<String, IntegerVariable> vars = new HashMap<String, IntegerVariable>();

  @Override
  public void report_error(String message, Object info) {
    String errorString = message;
    if (info != null) {
      errorString += " near " + info;
    }
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings(value = { "all" }) class  CUP$FeatureModelParser$actions {
  private final FeatureModelParser parser;

  /** Constructor */
  CUP$FeatureModelParser$actions(FeatureModelParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FeatureModelParser$do_action(
    int                        CUP$FeatureModelParser$act_num,
    java_cup.runtime.lr_parser CUP$FeatureModelParser$parser,
    java.util.Stack            CUP$FeatureModelParser$stack,
    int                        CUP$FeatureModelParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FeatureModelParser$result;

      /* select the action based on the action number */
      switch (CUP$FeatureModelParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Expression ::= IDENTIFIER 
            {
              Constraint RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 
			 		String id = i.toString();
			 		IntegerVariable var = this.parser.vars.get(id);
			 		if (var == null) {
			 			var = Choco.makeBooleanVar(id);
						this.parser.vars.put(id, var);
					} 
			 		RESULT = Choco.eq(1, var); 
			 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Expression ::= OBRACKETS Expression CBRACKETS 
            {
              Constraint RESULT =null;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		 RESULT = e1; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Expression ::= NOT Expression 
            {
              Constraint RESULT =null;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = Choco.not(e1); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Expression ::= Expression IMPLIES Expression 
            {
              Constraint RESULT =null;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		Constraint e2 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = Choco.implies(e1,e2); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Expression ::= Expression XOR Expression 
            {
              Constraint RESULT =null;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		Constraint e2 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = Choco.or(Choco.and(Choco.not(e1),e2), Choco.and(e1,Choco.not(e2))); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Expression ::= Expression OR Expression 
            {
              Constraint RESULT =null;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		Constraint e2 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = Choco.or(e1,e2); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Expression ::= Expression AND Expression 
            {
              Constraint RESULT =null;
		Constraint e1 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-2)).value;
		Constraint e2 = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = Choco.and(e1,e2); 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("Expression",1, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // initial ::= 
            {
              Constraint RESULT =null;
		 RESULT = Choco.TRUE; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Constraint start_val = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.elementAt(CUP$FeatureModelParser$top-1)).value;
		RESULT = start_val;
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$FeatureModelParser$parser.done_parsing();
          return CUP$FeatureModelParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // initial ::= Expression 
            {
              Constraint RESULT =null;
		Constraint e = (Constraint)((java_cup.runtime.Symbol) CUP$FeatureModelParser$stack.peek()).value;
		 RESULT = e; 
              CUP$FeatureModelParser$result = parser.getSymbolFactory().newSymbol("initial",0, RESULT);
            }
          return CUP$FeatureModelParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

