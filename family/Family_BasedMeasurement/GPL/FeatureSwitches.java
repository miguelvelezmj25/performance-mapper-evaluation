package verificationClasses;
public class FeatureSwitches {
/*
 * DO NOT EDIT! THIS FILE IS AUTOGENERATED BY fstcomp 
 */

public static boolean __SELECTED_FEATURE_Base;
public static boolean __SELECTED_FEATURE_DirectedOnlyVertices;
public static boolean __SELECTED_FEATURE_DirectedWithEdges;
public static boolean __SELECTED_FEATURE_DirectedWithNeighbors;
public static boolean __SELECTED_FEATURE_UndirectedOnlyVertices;
public static boolean __SELECTED_FEATURE_UndirectedWithEdges;
public static boolean __SELECTED_FEATURE_UndirectedWithNeighbors;
public static boolean __SELECTED_FEATURE_WeightedOnlyVertices;
public static boolean __SELECTED_FEATURE_WeightedWithNeighbors;
public static boolean __SELECTED_FEATURE_BFS;
public static boolean __SELECTED_FEATURE_Connected;
public static boolean __SELECTED_FEATURE_Cycle;
public static boolean __SELECTED_FEATURE_DFS;
public static boolean __SELECTED_FEATURE_MSTKruskal;
public static boolean __SELECTED_FEATURE_MSTPrim;
public static boolean __SELECTED_FEATURE_Number;
public static boolean __SELECTED_FEATURE_Transpose;
public static boolean __SELECTED_FEATURE_Benchmark;
public static boolean __SELECTED_FEATURE_TestProg;
public static boolean __SELECTED_FEATURE_WithEdges;
public static boolean __SELECTED_FEATURE_WithNeighbors;
public static boolean __SELECTED_FEATURE_OnlyVertices;
public static String getSelectedFeaturesAsNames() {
StringBuilder sb = new StringBuilder();
	if (__SELECTED_FEATURE_Base) sb.append("Base;");
	if (__SELECTED_FEATURE_DirectedWithNeighbors) sb.append("DirectedWithNeighbors;");
	if (__SELECTED_FEATURE_Connected) sb.append("Connected;");
	if (__SELECTED_FEATURE_Number) sb.append("Number;");
	if (__SELECTED_FEATURE_Transpose) sb.append("Transpose;");
	if (__SELECTED_FEATURE_UndirectedOnlyVertices) sb.append("UndirectedOnlyVertices;");
	if (__SELECTED_FEATURE_MSTKruskal) sb.append("MSTKruskal;");
	if (__SELECTED_FEATURE_DirectedWithEdges) sb.append("DirectedWithEdges;");
	if (__SELECTED_FEATURE_UndirectedWithEdges) sb.append("UndirectedWithEdges;");
	if (__SELECTED_FEATURE_WithNeighbors) sb.append("WithNeighbors;");
	if (__SELECTED_FEATURE_WithEdges) sb.append("WithEdges;");
	if (__SELECTED_FEATURE_MSTPrim) sb.append("MSTPrim;");
	if (__SELECTED_FEATURE_DFS) sb.append("DFS;");
	if (__SELECTED_FEATURE_Benchmark) sb.append("Benchmark;");
	if (__SELECTED_FEATURE_BFS) sb.append("BFS;");
	if (__SELECTED_FEATURE_Cycle) sb.append("Cycle;");
	if (__SELECTED_FEATURE_OnlyVertices) sb.append("OnlyVertices;");
	if (__SELECTED_FEATURE_TestProg) sb.append("TestProg;");
	if (__SELECTED_FEATURE_WeightedOnlyVertices) sb.append("WeightedOnlyVertices;");
	if (__SELECTED_FEATURE_DirectedOnlyVertices) sb.append("DirectedOnlyVertices;");
	if (__SELECTED_FEATURE_WeightedWithNeighbors) sb.append("WeightedWithNeighbors;");
	if (__SELECTED_FEATURE_UndirectedWithNeighbors) sb.append("UndirectedWithNeighbors;");
return sb.toString();
}
public static void select_features() {
	__SELECTED_FEATURE_Base = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_DirectedWithNeighbors = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_Connected = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_Number = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_Transpose = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_UndirectedOnlyVertices = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_MSTKruskal = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_DirectedWithEdges = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_UndirectedWithEdges = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_WithNeighbors = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_WithEdges = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_MSTPrim = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_DFS = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_Benchmark = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_BFS = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_Cycle = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_OnlyVertices = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_TestProg = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_WeightedOnlyVertices = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_DirectedOnlyVertices = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_WeightedWithNeighbors = verificationClasses.SPLModelChecker.getBoolean();
	__SELECTED_FEATURE_UndirectedWithNeighbors = verificationClasses.SPLModelChecker.getBoolean();
}

public static boolean __GUIDSL_ROOT_PRODUCTION;
public static boolean __GUIDSL_NON_TERMINAL_MST;
public static boolean __GUIDSL_NON_TERMINAL_Prog;
public static boolean __GUIDSL_NON_TERMINAL_StronglyConnected;
public static boolean __GUIDSL_NON_TERMINAL_Directed;
public static boolean __GUIDSL_NON_TERMINAL_Weighted;
public static boolean __GUIDSL_NON_TERMINAL_Search;
public static boolean __GUIDSL_NON_TERMINAL_Shortest;
public static boolean __GUIDSL_NON_TERMINAL_Undirected;

public static void select_helpers() {
	__GUIDSL_ROOT_PRODUCTION = true;
	__GUIDSL_NON_TERMINAL_MST = true;
	__GUIDSL_NON_TERMINAL_Prog = true;
	__GUIDSL_NON_TERMINAL_StronglyConnected = true;
	__GUIDSL_NON_TERMINAL_Directed = true;
	__GUIDSL_NON_TERMINAL_Weighted = true;
	__GUIDSL_NON_TERMINAL_Search = true;
	__GUIDSL_NON_TERMINAL_Shortest = true;
	__GUIDSL_NON_TERMINAL_Undirected = true;
}

public static boolean valid_product() {
	if ( ( __SELECTED_FEATURE_Base ) && __SELECTED_FEATURE_Benchmark && __GUIDSL_NON_TERMINAL_Prog && ( __SELECTED_FEATURE_Number || __SELECTED_FEATURE_Connected || ( __SELECTED_FEATURE_Transpose && __GUIDSL_NON_TERMINAL_StronglyConnected ) || __SELECTED_FEATURE_Cycle || __SELECTED_FEATURE_MSTPrim || __SELECTED_FEATURE_MSTKruskal || __GUIDSL_NON_TERMINAL_Shortest ) && ( !__GUIDSL_NON_TERMINAL_Search || ( __SELECTED_FEATURE_BFS || __SELECTED_FEATURE_DFS )) && ( __GUIDSL_NON_TERMINAL_Directed ^ __GUIDSL_NON_TERMINAL_Undirected ) && ( !__SELECTED_FEATURE_Number || (( __GUIDSL_NON_TERMINAL_Directed ^ __GUIDSL_NON_TERMINAL_Undirected ) && __GUIDSL_NON_TERMINAL_Search )) && ( !__SELECTED_FEATURE_Connected || ( __GUIDSL_NON_TERMINAL_Undirected && __GUIDSL_NON_TERMINAL_Search )) && ( !__SELECTED_FEATURE_Transpose || ( __GUIDSL_NON_TERMINAL_Directed && __SELECTED_FEATURE_DFS )) && ( !__SELECTED_FEATURE_Cycle || (( __GUIDSL_NON_TERMINAL_Directed ^ __GUIDSL_NON_TERMINAL_Undirected ) && __SELECTED_FEATURE_DFS )) && (( !( __SELECTED_FEATURE_MSTKruskal || __SELECTED_FEATURE_MSTPrim )) || ( __GUIDSL_NON_TERMINAL_Undirected && __GUIDSL_NON_TERMINAL_Weighted )) && ( !( __SELECTED_FEATURE_MSTKruskal || __SELECTED_FEATURE_MSTPrim ) || ( !( __SELECTED_FEATURE_MSTKruskal && __SELECTED_FEATURE_MSTPrim )) ) && ( !__GUIDSL_NON_TERMINAL_Shortest || ( __GUIDSL_NON_TERMINAL_Directed && __GUIDSL_NON_TERMINAL_Weighted )) && ( !( __SELECTED_FEATURE_Number || __GUIDSL_NON_TERMINAL_StronglyConnected || __SELECTED_FEATURE_Cycle || __SELECTED_FEATURE_Connected ) || __GUIDSL_NON_TERMINAL_Search ) && ( !__GUIDSL_NON_TERMINAL_StronglyConnected || __SELECTED_FEATURE_Transpose ) && ( !( __SELECTED_FEATURE_BFS || __SELECTED_FEATURE_DFS ) || __GUIDSL_NON_TERMINAL_Search ) && ( !( __SELECTED_FEATURE_MSTKruskal || __SELECTED_FEATURE_MSTPrim ) || __GUIDSL_NON_TERMINAL_MST ) && ( !__GUIDSL_NON_TERMINAL_MST || ( __SELECTED_FEATURE_MSTKruskal || __SELECTED_FEATURE_MSTPrim )) )
		return true;
	else
		return false;
}
}